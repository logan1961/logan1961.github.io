<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Logan&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/c057a3d62905e7aa8bd329ef6c9755eb</icon>
  <subtitle>Life is too short to be ordinary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://loganwz.com/"/>
  <updated>2021-05-06T09:30:18.657Z</updated>
  <id>http://loganwz.com/</id>
  
  <author>
    <name>logan_wz</name>
    <email>logan_wz@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot集成Swagger2:3.0.0</title>
    <link href="http://loganwz.com/2021/04/17/log23SpringBoot-Swagger2/"/>
    <id>http://loganwz.com/2021/04/17/log23SpringBoot-Swagger2/</id>
    <published>2021-04-17T13:20:00.000Z</published>
    <updated>2021-05-06T09:30:18.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-pom-xml引入依赖"><a href="#1-pom-xml引入依赖" class="headerlink" title="1.pom.xml引入依赖"></a>1.pom.xml引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2.创建配置类"></a>2.创建配置类</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableOpenApi</span></span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.OAS_30)<span class="selector-class">.apiInfo</span>(apiInfo())<span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"com.logan"</span>))<span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()<span class="selector-class">.title</span>(<span class="string">"API接口文档"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"1.0.0"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">""</span>)</span><br><span class="line">                <span class="selector-class">.contact</span>(new Contact(<span class="string">"logan"</span>,</span><br><span class="line">                        <span class="string">"http://loganwz.com/"</span>,</span><br><span class="line">                        <span class="string">"logan_wz@163.com"</span>))</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-controller层编写代码"><a href="#3-controller层编写代码" class="headerlink" title="3.controller层编写代码"></a>3.controller层编写代码</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags = <span class="string">"用户"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Resource</span></span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@ApiOperation</span>(value = <span class="string">"获取用户信息"</span>, notes = <span class="string">"获取用户信息"</span>)</span><br><span class="line">    <span class="variable">@ResponseBody</span></span><br><span class="line">    <span class="variable">@GetMapping</span>(<span class="string">"/getUserById"</span>)</span><br><span class="line">    public Result getUserById(<span class="variable">@ApiParam</span>(value = <span class="string">"userId"</span>,required = true)</span><br><span class="line">                              <span class="variable">@RequestParam</span>(value = <span class="string">"userId"</span>)Integer userId) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">Result</span><span class="selector-class">.success</span>(userService.getUserById(userId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h2><p>Swagger2:3.0.0往上的版本有些变化<br>注解用的是<code>@EnableOpenApi</code>，Docket的DocumentationType是<code>OAS_30</code><br>启动项目后接口文档页面改为了：<code>/swagger-ui/index.html</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-pom-xml引入依赖&quot;&gt;&lt;a href=&quot;#1-pom-xml引入依赖&quot; class=&quot;headerlink&quot; title=&quot;1.pom.xml引入依赖&quot;&gt;&lt;/a&gt;1.pom.xml引入依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
      <category term="SpringBoot" scheme="http://loganwz.com/categories/Java/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://loganwz.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>通过Java操作MongoDB</title>
    <link href="http://loganwz.com/2020/06/03/log22mongodb-java/"/>
    <id>http://loganwz.com/2020/06/03/log22mongodb-java/</id>
    <published>2020-06-03T08:20:00.000Z</published>
    <updated>2021-03-17T07:11:26.604Z</updated>
    
    <content type="html"><![CDATA[<p>使用mongodb-driver驱动包实现Java代码操作MongoDB</p><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><p>根据项目情况（Gradle,Maven），引入mongodb-driver依赖<br>Maven:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongodb-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Gradle:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="selector-tag">org</span><span class="selector-class">.mongodb</span><span class="selector-pseudo">:mongodb-driver</span><span class="selector-pseudo">:3.6.3"</span>,</span><br></pre></td></tr></table></figure></p><h2 id="2-连接测试"><a href="#2-连接测试" class="headerlink" title="2.连接测试"></a>2.连接测试</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接MongoDB，参数为对应的ip和端口</span></span><br><span class="line">MongoClient <span class="keyword">client</span> = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.200.66"</span>,<span class="number">27017</span>)</span><br><span class="line"><span class="comment">//打开数据库base</span></span><br><span class="line">DB db = <span class="keyword">client</span>.getDB(<span class="string">"base"</span>);</span><br><span class="line"><span class="comment">//获取集合</span></span><br><span class="line">DBCollection dbCollection = db.getCollection(<span class="string">"aaa"</span>);</span><br></pre></td></tr></table></figure><h2 id="3-根据条件查询"><a href="#3-根据条件查询" class="headerlink" title="3.根据条件查询"></a>3.根据条件查询</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接如上，在集合中查找projectid为111的记录</span></span><br><span class="line">dbCollection.findOne(<span class="keyword">new</span> BasicDBObject(<span class="string">"projectid"</span>,<span class="string">"111"</span>));</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">client.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><h2 id="4-插入数据"><a href="#4-插入数据" class="headerlink" title="4.插入数据"></a>4.插入数据</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接同2</span></span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="built_in">map</span>.put(<span class="string">"projectid"</span>, <span class="string">"1112"</span>);</span><br><span class="line"><span class="built_in">map</span>.put(<span class="string">"content"</span>, <span class="string">"test"</span>);</span><br><span class="line">Document document = <span class="keyword">new</span> Document(<span class="built_in">map</span>);</span><br><span class="line"><span class="comment">// 插入一条数据</span></span><br><span class="line">dbCollection.insertOne(document);</span><br></pre></td></tr></table></figure><h2 id="5-上传文件"><a href="#5-上传文件" class="headerlink" title="5.上传文件"></a>5.上传文件</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接MongoDB</span></span><br><span class="line">MongoClient <span class="keyword">client</span> = <span class="keyword">new</span> MongoClient(<span class="string">"192.168.200.1"</span>,<span class="string">"27017"</span>),</span><br><span class="line"><span class="comment">//打开数据库base</span></span><br><span class="line">DB db = <span class="keyword">client</span>.getDB(<span class="string">"base"</span>);</span><br><span class="line"><span class="comment">//获取核心类，GridFS：核心类，提供了对文件的创建、查找和删除操作。</span></span><br><span class="line">GridFS myFS = <span class="keyword">new</span> GridFS(db,<span class="string">"materials"</span>);</span><br><span class="line"><span class="comment">//通过输入流来保存文件，参数分别为文件输入流，上传的文件名</span></span><br><span class="line">GridFSInputFile gridFSInputFile = myFS.createFile(inputstream,fileName);</span><br><span class="line">gridFSInputFile.save();</span><br><span class="line"><span class="comment">//从本地上传测试</span></span><br><span class="line"><span class="comment">//GridFSFile file = myFS.createFile(new File("D:/test.txt"));</span></span><br><span class="line"><span class="comment">//file.save();</span></span><br><span class="line"><span class="keyword">client</span>.close();</span><br></pre></td></tr></table></figure><h2 id="6-下载文件"><a href="#6-下载文件" class="headerlink" title="6.下载文件"></a>6.下载文件</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接MongoDB</span></span><br><span class="line">MongoClient client = <span class="keyword">new</span> <span class="type">MongoClient</span>(<span class="string">"192.168.200.1"</span>,<span class="string">"27017"</span>),</span><br><span class="line"><span class="comment">//打开数据库base</span></span><br><span class="line">DB db = client.getDB(<span class="string">"base"</span>);</span><br><span class="line"><span class="comment">//获取核心类，GridFS：核心类，提供了对文件的创建、查找和删除操作。</span></span><br><span class="line">GridFS myFS = <span class="keyword">new</span> <span class="type">GridFS</span>(db,<span class="string">"materials"</span>);</span><br><span class="line"><span class="comment">//查找到要下载的文件</span></span><br><span class="line">GridFSDBFile gridFSDBFile = myFS.findOne(<span class="keyword">new</span> <span class="type">ObjectId</span>());</span><br><span class="line"><span class="comment">//GridFSDBFile gridFSDBFile2 = myFS.findOne("filename");</span></span><br><span class="line">gridFSDBFile2.writeTo(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"D:/aaa.txt"</span>));</span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用mongodb-driver驱动包实现Java代码操作MongoDB&lt;/p&gt;
&lt;h2 id=&quot;1-引入依赖&quot;&gt;&lt;a href=&quot;#1-引入依赖&quot; class=&quot;headerlink&quot; title=&quot;1.引入依赖&quot;&gt;&lt;/a&gt;1.引入依赖&lt;/h2&gt;&lt;p&gt;根据项目情况（Gra
      
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
      <category term="MongoDB" scheme="http://loganwz.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>LDAP的基础入门</title>
    <link href="http://loganwz.com/2019/12/18/logan20LDAP/"/>
    <id>http://loganwz.com/2019/12/18/logan20LDAP/</id>
    <published>2019-12-18T06:56:19.000Z</published>
    <updated>2019-12-19T12:08:44.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>LADP(Lightweight Directory Access Protocol)是轻型目录访问协议，是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p></blockquote><p>目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。</p><p>目录数据库写性能差，没有事务处理、回滚等功能，不适合数据的频繁修改，但由于读性能高，适合用来查询。</p><p><code>LDAP目录服务是由目录数据库和一套访问协议组成的系统</code></p><p><strong>目录树</strong>：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目<br><strong>条目</strong>：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）<br><strong>对象类</strong>：与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属性也会被继承下来<br><strong>属性</strong>：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性</p><h2 id="LDAP简称含义"><a href="#LDAP简称含义" class="headerlink" title="LDAP简称含义"></a>LDAP简称含义</h2><table><thead><tr><th>关键字</th><th>全称</th><th>含义</th></tr></thead><tbody><tr><td>uid</td><td>User Id</td><td>用户ID songtao.xu（一条记录的ID）</td></tr><tr><td>c</td><td>Country Name</td><td>国家</td></tr><tr><td>dc</td><td>Domain Component</td><td>域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）</td></tr><tr><td>o</td><td>Organization</td><td>组织</td></tr><tr><td>ou</td><td>Organization Unit</td><td>组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如“a组”（一条记录的所属组织）</td></tr><tr><td>cn</td><td>Common Name</td><td>公共名称，如“Logan”（一条记录的名称）</td></tr><tr><td>sn</td><td>Surname</td><td>真实名称</td></tr><tr><td>dn</td><td>Distinguished Name</td><td>“uid=songtao.xu,ou=oa组,dc=example,dc=com”，一条记录的位置（唯一）</td></tr><tr><td>rdn</td><td>Relative dn</td><td>相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn=Logan”</td></tr></tbody></table><h2 id="一条记录的位置"><a href="#一条记录的位置" class="headerlink" title="一条记录的位置"></a>一条记录的位置</h2><p><code>uid=wz,dc=example,dc=cn</code><br>表示example.com下唯一的用户wz</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;LADP(Lightweight Directory Access Protocol)是轻型目录访问协议，是一个开
      
    
    </summary>
    
      <category term="LDAP" scheme="http://loganwz.com/categories/LDAP/"/>
    
    
      <category term="LDAP" scheme="http://loganwz.com/tags/LDAP/"/>
    
  </entry>
  
  <entry>
    <title>redis的使用（一）-安装与配置</title>
    <link href="http://loganwz.com/2019/11/28/logan19redis1/"/>
    <id>http://loganwz.com/2019/11/28/logan19redis1/</id>
    <published>2019-11-28T03:53:19.000Z</published>
    <updated>2019-12-19T12:10:28.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h3><p>点击下载：<a href="https://github.com/MSOpenTech/redis/release" target="_blank" rel="noopener">下载地址</a></p><p>根据系统选择32或64位的压缩包，解压后放到D:\developer目录下，文件夹改名为redis</p><p>启动服务端：打开cmd，切换到redis路径下,执行<br><code>redis-server.exe redis.windows.conf</code></p><p>显示如图界面表示启动成功<br><img src=".\img\001.png" alt="windows下启动"></p><p>启动客户端：在redis路径下执行(此时服务端应保证启动)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span> <span class="comment">//启动</span></span><br><span class="line">set <span class="type">key</span> test  <span class="comment">//设置键值对</span></span><br><span class="line">get <span class="type">key</span>   <span class="comment">//获取键值对</span></span><br></pre></td></tr></table></figure><p><img src=".\img\002.png" alt="获取键值对"></p><h3 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h3><p>选择最新稳定版本点击下载：<a href="https://redis.io/download" target="_blank" rel="noopener">下载地址</a></p><p>复制到服务器上进行解压<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-5.0.7</span><br><span class="line"><span class="keyword">cd</span> redis-5.0.7/</span><br><span class="line">make <span class="string">//</span>会在src下生成redis-server和redis-cli</span><br><span class="line"><span class="keyword">cd</span> src</span><br><span class="line"><span class="string">./redis-server</span> <span class="string">//</span>启动服务端</span><br><span class="line"><span class="string">./redis-cli</span> <span class="string">//</span>启动客户端，测试方式与win相同</span><br></pre></td></tr></table></figure></p><h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET * <span class="comment">//获取所有配置信息</span></span><br><span class="line"><span class="function"><span class="title">CONFIG</span></span> GET ... <span class="comment">//获取某一项配置信息</span></span><br><span class="line">CONFIG <span class="keyword">SET</span> xxx <span class="comment">xxx</span> //修改某一项配置信息</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">配置项详情：</span><br><span class="line">128.127.0.0.1:6379&gt;<span class="built_in"> CONFIG </span><span class="builtin-name">GET</span> *</span><br><span class="line">  1) <span class="string">"dbfilename"</span></span><br><span class="line">  2) <span class="string">"dump.rdb"</span></span><br><span class="line">  3) <span class="string">"requirepass"</span></span><br><span class="line">  4) <span class="string">""</span></span><br><span class="line">  5) <span class="string">"masterauth"</span></span><br><span class="line">  6) <span class="string">""</span></span><br><span class="line">  7) <span class="string">"cluster-announce-ip"</span></span><br><span class="line">  8) <span class="string">""</span></span><br><span class="line">  9) <span class="string">"unixsocket"</span></span><br><span class="line"> 10) <span class="string">""</span></span><br><span class="line"> 11) <span class="string">"logfile"</span></span><br><span class="line"> 12) <span class="string">""</span></span><br><span class="line"> 13) <span class="string">"pidfile"</span></span><br><span class="line"> 14) <span class="string">""</span></span><br><span class="line"> 15) <span class="string">"slave-announce-ip"</span></span><br><span class="line"> 16) <span class="string">""</span></span><br><span class="line"> 17) <span class="string">"replica-announce-ip"</span></span><br><span class="line"> 18) <span class="string">""</span></span><br><span class="line"> 19) <span class="string">"maxmemory"</span></span><br><span class="line"> 20) <span class="string">"0"</span></span><br><span class="line"> 21) <span class="string">"proto-max-bulk-len"</span></span><br><span class="line"> 22) <span class="string">"536870912"</span></span><br><span class="line"> 23) <span class="string">"client-query-buffer-limit"</span></span><br><span class="line"> 24) <span class="string">"1073741824"</span></span><br><span class="line"> 25) <span class="string">"maxmemory-samples"</span></span><br><span class="line"> 26) <span class="string">"5"</span></span><br><span class="line"> 27) <span class="string">"lfu-log-factor"</span></span><br><span class="line"> 28) <span class="string">"10"</span></span><br><span class="line"> 29) <span class="string">"lfu-decay-time"</span></span><br><span class="line"> 30) <span class="string">"1"</span></span><br><span class="line"> 31) <span class="string">"timeout"</span></span><br><span class="line"> 32) <span class="string">"0"</span></span><br><span class="line"> 33) <span class="string">"active-defrag-threshold-lower"</span></span><br><span class="line"> 34) <span class="string">"10"</span></span><br><span class="line"> 35) <span class="string">"active-defrag-threshold-upper"</span></span><br><span class="line"> 36) <span class="string">"100"</span></span><br><span class="line"> 37) <span class="string">"active-defrag-ignore-bytes"</span></span><br><span class="line"> 38) <span class="string">"104857600"</span></span><br><span class="line"> 39) <span class="string">"active-defrag-cycle-min"</span></span><br><span class="line"> 40) <span class="string">"5"</span></span><br><span class="line"> 41) <span class="string">"active-defrag-cycle-max"</span></span><br><span class="line"> 42) <span class="string">"75"</span></span><br><span class="line"> 43) <span class="string">"active-defrag-max-scan-fields"</span></span><br><span class="line"> 44) <span class="string">"1000"</span></span><br><span class="line"> 45) <span class="string">"auto-aof-rewrite-percentage"</span></span><br><span class="line"> 46) <span class="string">"100"</span></span><br><span class="line"> 47) <span class="string">"auto-aof-rewrite-min-size"</span></span><br><span class="line"> 48) <span class="string">"67108864"</span></span><br><span class="line"> 49) <span class="string">"hash-max-ziplist-entries"</span></span><br><span class="line"> 50) <span class="string">"512"</span></span><br><span class="line"> 51) <span class="string">"hash-max-ziplist-value"</span></span><br><span class="line"> 52) <span class="string">"64"</span></span><br><span class="line"> 53) <span class="string">"stream-node-max-bytes"</span></span><br><span class="line"> 54) <span class="string">"4096"</span></span><br><span class="line"> 55) <span class="string">"stream-node-max-entries"</span></span><br><span class="line"> 56) <span class="string">"100"</span></span><br><span class="line"> 57) <span class="string">"list-max-ziplist-size"</span></span><br><span class="line"> 58) <span class="string">"-2"</span></span><br><span class="line"> 59) <span class="string">"list-compress-depth"</span></span><br><span class="line"> 60) <span class="string">"0"</span></span><br><span class="line"> 61) <span class="string">"set-max-intset-entries"</span></span><br><span class="line"> 62) <span class="string">"512"</span></span><br><span class="line"> 63) <span class="string">"zset-max-ziplist-entries"</span></span><br><span class="line"> 64) <span class="string">"128"</span></span><br><span class="line"> 65) <span class="string">"zset-max-ziplist-value"</span></span><br><span class="line"> 66) <span class="string">"64"</span></span><br><span class="line"> 67) <span class="string">"hll-sparse-max-bytes"</span></span><br><span class="line"> 68) <span class="string">"3000"</span></span><br><span class="line"> 69) <span class="string">"lua-time-limit"</span></span><br><span class="line"> 70) <span class="string">"5000"</span></span><br><span class="line"> 71) <span class="string">"slowlog-log-slower-than"</span></span><br><span class="line"> 72) <span class="string">"10000"</span></span><br><span class="line"> 73) <span class="string">"latency-monitor-threshold"</span></span><br><span class="line"> 74) <span class="string">"0"</span></span><br><span class="line"> 75) <span class="string">"slowlog-max-len"</span></span><br><span class="line"> 76) <span class="string">"128"</span></span><br><span class="line"> 77) <span class="string">"port"</span></span><br><span class="line"> 78) <span class="string">"6379"</span></span><br><span class="line"> 79) <span class="string">"cluster-announce-port"</span></span><br><span class="line"> 80) <span class="string">"0"</span></span><br><span class="line"> 81) <span class="string">"cluster-announce-bus-port"</span></span><br><span class="line"> 82) <span class="string">"0"</span></span><br><span class="line"> 83) <span class="string">"tcp-backlog"</span></span><br><span class="line"> 84) <span class="string">"511"</span></span><br><span class="line"> 85) <span class="string">"databases"</span></span><br><span class="line"> 86) <span class="string">"16"</span></span><br><span class="line"> 87) <span class="string">"repl-ping-slave-period"</span></span><br><span class="line"> 88) <span class="string">"10"</span></span><br><span class="line"> 89) <span class="string">"repl-ping-replica-period"</span></span><br><span class="line"> 90) <span class="string">"10"</span></span><br><span class="line"> 91) <span class="string">"repl-timeout"</span></span><br><span class="line"> 92) <span class="string">"60"</span></span><br><span class="line"> 93) <span class="string">"repl-backlog-size"</span></span><br><span class="line"> 94) <span class="string">"1048576"</span></span><br><span class="line"> 95) <span class="string">"repl-backlog-ttl"</span></span><br><span class="line"> 96) <span class="string">"3600"</span></span><br><span class="line"> 97) <span class="string">"maxclients"</span></span><br><span class="line"> 98) <span class="string">"10000"</span></span><br><span class="line"> 99) <span class="string">"watchdog-period"</span></span><br><span class="line">100) <span class="string">"0"</span></span><br><span class="line">101) <span class="string">"slave-priority"</span></span><br><span class="line">102) <span class="string">"100"</span></span><br><span class="line">103) <span class="string">"replica-priority"</span></span><br><span class="line">104) <span class="string">"100"</span></span><br><span class="line">105) <span class="string">"slave-announce-port"</span></span><br><span class="line">106) <span class="string">"0"</span></span><br><span class="line">107) <span class="string">"replica-announce-port"</span></span><br><span class="line">108) <span class="string">"0"</span></span><br><span class="line">109) <span class="string">"min-slaves-to-write"</span></span><br><span class="line">110) <span class="string">"0"</span></span><br><span class="line">111) <span class="string">"min-replicas-to-write"</span></span><br><span class="line">112) <span class="string">"0"</span></span><br><span class="line">113) <span class="string">"min-slaves-max-lag"</span></span><br><span class="line">114) <span class="string">"10"</span></span><br><span class="line">115) <span class="string">"min-replicas-max-lag"</span></span><br><span class="line">116) <span class="string">"10"</span></span><br><span class="line">117) <span class="string">"hz"</span></span><br><span class="line">118) <span class="string">"10"</span></span><br><span class="line">119) <span class="string">"cluster-node-timeout"</span></span><br><span class="line">120) <span class="string">"15000"</span></span><br><span class="line">121) <span class="string">"cluster-migration-barrier"</span></span><br><span class="line">122) <span class="string">"1"</span></span><br><span class="line">123) <span class="string">"cluster-slave-validity-factor"</span></span><br><span class="line">124) <span class="string">"10"</span></span><br><span class="line">125) <span class="string">"cluster-replica-validity-factor"</span></span><br><span class="line">126) <span class="string">"10"</span></span><br><span class="line">127) <span class="string">"repl-diskless-sync-delay"</span></span><br><span class="line">128) <span class="string">"5"</span></span><br><span class="line">129) <span class="string">"tcp-keepalive"</span></span><br><span class="line">130) <span class="string">"300"</span></span><br><span class="line">131) <span class="string">"cluster-require-full-coverage"</span></span><br><span class="line">132) <span class="string">"yes"</span></span><br><span class="line">133) <span class="string">"cluster-slave-no-failover"</span></span><br><span class="line">134) <span class="string">"no"</span></span><br><span class="line">135) <span class="string">"cluster-replica-no-failover"</span></span><br><span class="line">136) <span class="string">"no"</span></span><br><span class="line">137) <span class="string">"no-appendfsync-on-rewrite"</span></span><br><span class="line">138) <span class="string">"no"</span></span><br><span class="line">139) <span class="string">"slave-serve-stale-data"</span></span><br><span class="line">140) <span class="string">"yes"</span></span><br><span class="line">141) <span class="string">"replica-serve-stale-data"</span></span><br><span class="line">142) <span class="string">"yes"</span></span><br><span class="line">143) <span class="string">"slave-read-only"</span></span><br><span class="line">144) <span class="string">"yes"</span></span><br><span class="line">145) <span class="string">"replica-read-only"</span></span><br><span class="line">146) <span class="string">"yes"</span></span><br><span class="line">147) <span class="string">"slave-ignore-maxmemory"</span></span><br><span class="line">148) <span class="string">"yes"</span></span><br><span class="line">149) <span class="string">"replica-ignore-maxmemory"</span></span><br><span class="line">150) <span class="string">"yes"</span></span><br><span class="line">151) <span class="string">"stop-writes-on-bgsave-error"</span></span><br><span class="line">152) <span class="string">"yes"</span></span><br><span class="line">153) <span class="string">"daemonize"</span></span><br><span class="line">154) <span class="string">"no"</span></span><br><span class="line">155) <span class="string">"rdbcompression"</span></span><br><span class="line">156) <span class="string">"yes"</span></span><br><span class="line">157) <span class="string">"rdbchecksum"</span></span><br><span class="line">158) <span class="string">"yes"</span></span><br><span class="line">159) <span class="string">"activerehashing"</span></span><br><span class="line">160) <span class="string">"yes"</span></span><br><span class="line">161) <span class="string">"activedefrag"</span></span><br><span class="line">162) <span class="string">"no"</span></span><br><span class="line">163) <span class="string">"protected-mode"</span></span><br><span class="line">164) <span class="string">"yes"</span></span><br><span class="line">165) <span class="string">"repl-disable-tcp-nodelay"</span></span><br><span class="line">166) <span class="string">"no"</span></span><br><span class="line">167) <span class="string">"repl-diskless-sync"</span></span><br><span class="line">168) <span class="string">"no"</span></span><br><span class="line">169) <span class="string">"aof-rewrite-incremental-fsync"</span></span><br><span class="line">170) <span class="string">"yes"</span></span><br><span class="line">171) <span class="string">"rdb-save-incremental-fsync"</span></span><br><span class="line">172) <span class="string">"yes"</span></span><br><span class="line">173) <span class="string">"aof-load-truncated"</span></span><br><span class="line">174) <span class="string">"yes"</span></span><br><span class="line">175) <span class="string">"aof-use-rdb-preamble"</span></span><br><span class="line">176) <span class="string">"yes"</span></span><br><span class="line">177) <span class="string">"lazyfree-lazy-eviction"</span></span><br><span class="line">178) <span class="string">"no"</span></span><br><span class="line">179) <span class="string">"lazyfree-lazy-expire"</span></span><br><span class="line">180) <span class="string">"no"</span></span><br><span class="line">181) <span class="string">"lazyfree-lazy-server-del"</span></span><br><span class="line">182) <span class="string">"no"</span></span><br><span class="line">183) <span class="string">"slave-lazy-flush"</span></span><br><span class="line">184) <span class="string">"no"</span></span><br><span class="line">185) <span class="string">"replica-lazy-flush"</span></span><br><span class="line">186) <span class="string">"no"</span></span><br><span class="line">187) <span class="string">"dynamic-hz"</span></span><br><span class="line">188) <span class="string">"yes"</span></span><br><span class="line">189) <span class="string">"maxmemory-policy"</span></span><br><span class="line">190) <span class="string">"noeviction"</span></span><br><span class="line">191) <span class="string">"loglevel"</span></span><br><span class="line">192) <span class="string">"notice"</span></span><br><span class="line">193) <span class="string">"supervised"</span></span><br><span class="line">194) <span class="string">"no"</span></span><br><span class="line">195) <span class="string">"appendfsync"</span></span><br><span class="line">196) <span class="string">"everysec"</span></span><br><span class="line">197) <span class="string">"syslog-facility"</span></span><br><span class="line">198) <span class="string">"local0"</span></span><br><span class="line">199) <span class="string">"appendonly"</span></span><br><span class="line">200) <span class="string">"no"</span></span><br><span class="line">201) <span class="string">"dir"</span></span><br><span class="line">202) <span class="string">"/opt/redis-5.0.7/src"</span></span><br><span class="line">203) <span class="string">"save"</span></span><br><span class="line">204) <span class="string">"3600 1 300 100 60 10000"</span></span><br><span class="line">205) <span class="string">"client-output-buffer-limit"</span></span><br><span class="line">206) <span class="string">"normal 0 0 0 slave 268435456 67108864 60 pubsub 33554432 8388608 60"</span></span><br><span class="line">207) <span class="string">"unixsocketperm"</span></span><br><span class="line">208) <span class="string">"0"</span></span><br><span class="line">209) <span class="string">"slaveof"</span></span><br><span class="line">210) <span class="string">""</span></span><br><span class="line">211) <span class="string">"notify-keyspace-events"</span></span><br><span class="line">212) <span class="string">""</span></span><br><span class="line">213) <span class="string">"bind"</span></span><br><span class="line">214) <span class="string">""</span></span><br></pre></td></tr></table></figure><p><strong>常用配置</strong></p><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>port 6379</td><td>Redis 监听端口，默认端口为 6379</td></tr><tr><td>bind 127.0.0.1</td><td>绑定的主机地址</td></tr><tr><td>timeout 300</td><td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td></tr><tr><td>loglevel notice</td><td>日志级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td></tr><tr><td>databases 16</td><td>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td></tr><tr><td>save seconds changes</td><td>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合，save 900 1表示 900 秒（15 分钟）内有 1 个更改</td></tr><tr><td>rdbcompression yes</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td></tr><tr><td>dbfilename dump.rdb</td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>dir ./</td><td>指定本地数据库存放目录</td></tr></tbody></table><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><p>string 类型是二进制安全，可以包含任何数据（jpg图片或者序列化的对象）。string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">test1</span> <span class="selector-tag">heeee</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">test1</span></span><br><span class="line">"<span class="selector-tag">heeee</span>"</span><br></pre></td></tr></table></figure></p><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>hash 是一个键值(key=&gt;value)对集合。 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HMSET</span> <span class="selector-tag">test2</span> <span class="selector-tag">aa</span> "<span class="selector-tag">nihao</span>" <span class="selector-tag">bb</span> "<span class="selector-tag">www</span>" <span class="selector-tag">cc</span> "<span class="selector-tag">eeeee</span>"</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HGET</span> <span class="selector-tag">test2</span> <span class="selector-tag">cc</span></span><br><span class="line">"<span class="selector-tag">eeeee</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HGET</span> <span class="selector-tag">test2</span> <span class="selector-tag">bb</span></span><br><span class="line">"<span class="selector-tag">www</span>"</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HMGET</span> <span class="selector-tag">test2</span> <span class="selector-tag">aa</span></span><br><span class="line">1) "<span class="selector-tag">nihao</span>"</span><br></pre></td></tr></table></figure></p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>列表是简单的字符串列表，通过lpush和lrange插入和获取<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@log src]<span class="comment"># ./redis-cli </span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH test3 aaa</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH test3 bbbb</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH test3 vvv</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH test3 <span class="number">1212</span></span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH test3 <span class="number">14</span>jak</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LRANGE test3 <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"14jak"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"1212"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"vvv"</span></span><br><span class="line"><span class="number">4</span>) <span class="string">"bbbb"</span></span><br><span class="line"><span class="number">5</span>) <span class="string">"aaa"</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> LRANGE test3 <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"vvv"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"bbbb"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"aaa"</span></span><br></pre></td></tr></table></figure></p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis 的 Set 是 string 类型的无序集合，sadd元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SADD</span> <span class="selector-tag">test4</span> 111</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SADD</span> <span class="selector-tag">test4</span> 222</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SADD</span> <span class="selector-tag">test4</span> 222</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SADD</span> <span class="selector-tag">test4</span> <span class="selector-tag">aaaad</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">test4</span></span><br><span class="line">1) "<span class="selector-tag">aaaad</span>"</span><br><span class="line">2) "222"</span><br><span class="line">3) "111"</span><br></pre></td></tr></table></figure></p><h3 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD test5 0 aaa</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD test5 1 aaa</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; ZADD test5 0 bbb</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD test5 0 333</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE test5 0 10</span><br><span class="line">1) <span class="string">"333"</span></span><br><span class="line">2) <span class="string">"bbb"</span></span><br><span class="line">3) <span class="string">"aaa"</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>类型</th><th>介绍</th><th>特性</th><th>使用场景</th></tr></thead><tbody><tr><td>String(字符串)</td><td>二进制安全</td><td>可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td>–</td></tr><tr><td>Hash(哈希)</td><td>键值对集合,即编程语言中的Map类型</td><td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td>存储、读取、修改用户属性</td></tr><tr><td>List(列表)</td><td>链表(双向链表)</td><td>增删快,提供了操作某一段元素的API</td><td>1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set(集合)</td><td>哈希表实现,元素不重复</td><td>1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set(有序集合)</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;windows下安装&quot;&gt;&lt;a href=&quot;#windows下安装&quot; class=&quot;headerlink&quot; title=&quot;windo
      
    
    </summary>
    
      <category term="redis" scheme="http://loganwz.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://loganwz.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>linux下查看硬件的配置信息</title>
    <link href="http://loganwz.com/2019/10/26/log18linux1/"/>
    <id>http://loganwz.com/2019/10/26/log18linux1/</id>
    <published>2019-10-26T01:59:39.000Z</published>
    <updated>2019-12-19T12:18:10.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>最近项目上部署环境后系统访问速度极慢，于是检查了一下服务器的配置，主要用到了以下的命令</em></p></blockquote><h2 id="查看服务器的CPU信息"><a href="#查看服务器的CPU信息" class="headerlink" title="查看服务器的CPU信息"></a>查看服务器的CPU信息</h2><p><strong>查看物理的CPU个数</strong><br><code>cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</code></p><p><strong>查看物理CPU中core的个数（即核数）</strong><br><code>cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq</code></p><h2 id="查看服务器的内存情况"><a href="#查看服务器的内存情况" class="headerlink" title="查看服务器的内存情况"></a>查看服务器的内存情况</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">app</span>@gj-<span class="keyword">app</span> /]$ free -<span class="built_in">h</span></span><br><span class="line">              <span class="keyword">total</span>        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            30G         13G        6.8G        1.6G         10G         15G</span><br><span class="line">Swap:          8.0G        436K        8.0G</span><br></pre></td></tr></table></figure><p>返回的参数的主要含义：<br><code>total</code> 指内存总数<br><code>used</code> 指已经使用的内存数<br><code>free</code>指空闲的内存数<br><code>shared</code>指多个进程共享的内存总额<br><code>buffers Buffer Cache</code>和<code>cached Page Cache</code>指 磁盘缓存的大小<br>可用的memory=free memory+buffers+cached</p><h2 id="服务器的磁盘使用情况"><a href="#服务器的磁盘使用情况" class="headerlink" title="服务器的磁盘使用情况"></a>服务器的磁盘使用情况</h2><p><strong>查看磁盘分区情况</strong><br><code>fdisk – l</code></p><p><strong>查看当前磁盘使用情况</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[app@gj-app /]$ df -h</span><br><span class="line">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/cl-root   <span class="number">50</span>G   <span class="number">23</span>G   <span class="number">28</span>G   <span class="number">46</span>% /</span><br><span class="line">devtmpfs              <span class="number">16</span>G     <span class="number">0</span>   <span class="number">16</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs                 <span class="number">16</span>G  <span class="number">188</span>K   <span class="number">16</span>G    <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs                 <span class="number">16</span>G  <span class="number">1.6</span>G   <span class="number">14</span>G   <span class="number">11</span>% /run</span><br><span class="line">tmpfs                 <span class="number">16</span>G     <span class="number">0</span>   <span class="number">16</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/xvda1          <span class="number">1014</span>M  <span class="number">173</span>M  <span class="number">842</span>M   <span class="number">17</span>% /boot</span><br><span class="line">/dev/mapper/cl-home   <span class="number">21</span>G   <span class="number">97</span>M   <span class="number">21</span>G    <span class="number">1</span>% /home</span><br><span class="line">tmpfs                <span class="number">3.1</span>G  <span class="number">8.0</span>K  <span class="number">3.1</span>G    <span class="number">1</span>% /run/user/<span class="number">0</span></span><br><span class="line">tmpfs                <span class="number">3.1</span>G     <span class="number">0</span>  <span class="number">3.1</span>G    <span class="number">0</span>% /run/user/<span class="number">1001</span></span><br></pre></td></tr></table></figure><p><strong>查看硬盘性能</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[app<span class="title">@gj-app</span> /]$ iostat -<span class="keyword">x</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line">Linux <span class="number">3.10</span>.<span class="number">0</span><span class="number">-514</span>.el<span class="number">7</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> (gj-app)    <span class="number">2019</span>年<span class="number">10</span>月<span class="number">26</span>日  _x<span class="number">86</span>_<span class="number">64</span>_        (<span class="number">8</span> CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  <span class="symbol">%user</span>   <span class="symbol">%nice</span> <span class="symbol">%system</span> <span class="symbol">%iowait</span>  <span class="symbol">%steal</span>   <span class="symbol">%idle</span></span><br><span class="line">           <span class="number">0.31</span>    <span class="number">0.00</span>    <span class="number">0.14</span>    <span class="number">0.00</span>    <span class="number">0.03</span>   <span class="number">99.52</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  <span class="symbol">%util</span></span><br><span class="line">xvda              <span class="number">0.00</span>     <span class="number">0.18</span>    <span class="number">0.01</span>    <span class="number">2.03</span>     <span class="number">0.31</span>    <span class="number">15.66</span>    <span class="number">15.60</span>     <span class="number">0.00</span>    <span class="number">1.69</span>    <span class="number">9.24</span>    <span class="number">1.65</span>   <span class="number">0.27</span>   <span class="number">0.05</span></span><br><span class="line">dm<span class="number">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.01</span>    <span class="number">2.08</span>     <span class="number">0.30</span>    <span class="number">15.62</span>    <span class="number">15.20</span>     <span class="number">0.00</span>    <span class="number">1.86</span>    <span class="number">9.43</span>    <span class="number">1.82</span>   <span class="number">0.26</span>   <span class="number">0.05</span></span><br><span class="line">dm<span class="number">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">8.45</span>     <span class="number">0.00</span>    <span class="number">4.11</span>    <span class="number">0.47</span>    <span class="number">4.34</span>   <span class="number">0.27</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="number">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.03</span>     <span class="number">0.00</span>     <span class="number">0.04</span>     <span class="number">2.50</span>     <span class="number">0.00</span>    <span class="number">0.33</span>    <span class="number">8.18</span>    <span class="number">0.32</span>   <span class="number">0.24</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg-cpu:  <span class="symbol">%user</span>   <span class="symbol">%nice</span> <span class="symbol">%system</span> <span class="symbol">%iowait</span>  <span class="symbol">%steal</span>   <span class="symbol">%idle</span></span><br><span class="line">           <span class="number">0.25</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.12</span>    <span class="number">0.12</span>   <span class="number">99.50</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  <span class="symbol">%util</span></span><br><span class="line">xvda              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>     <span class="number">8.00</span>     <span class="number">0.00</span>    <span class="number">16.00</span>     <span class="number">0.01</span>   <span class="number">10.00</span>   <span class="number">10.00</span>    <span class="number">0.00</span>  <span class="number">10.00</span>   <span class="number">1.00</span></span><br><span class="line">dm<span class="number">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>     <span class="number">8.00</span>     <span class="number">0.00</span>    <span class="number">16.00</span>     <span class="number">0.01</span>   <span class="number">10.00</span>   <span class="number">10.00</span>    <span class="number">0.00</span>  <span class="number">10.00</span>   <span class="number">1.00</span></span><br><span class="line">dm<span class="number">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="number">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg-cpu:  <span class="symbol">%user</span>   <span class="symbol">%nice</span> <span class="symbol">%system</span> <span class="symbol">%iowait</span>  <span class="symbol">%steal</span>   <span class="symbol">%idle</span></span><br><span class="line">           <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  <span class="symbol">%util</span></span><br><span class="line">xvda              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="number">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="number">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="number">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure><h2 id="查看系统内核"><a href="#查看系统内核" class="headerlink" title="查看系统内核"></a>查看系统内核</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[app<span class="title">@gj-app</span> /]$ uname -a</span><br><span class="line">Linux gj-app <span class="number">3.10</span>.<span class="number">0</span><span class="number">-514</span>.el<span class="number">7</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="symbol">#1</span> SMP Tue Nov <span class="number">22</span> <span class="number">16</span>:<span class="number">42</span>:<span class="number">41</span> UTC <span class="number">2016</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="查看服务器使用的Linux发行版的名称、版本号及描述信息等"><a href="#查看服务器使用的Linux发行版的名称、版本号及描述信息等" class="headerlink" title="查看服务器使用的Linux发行版的名称、版本号及描述信息等"></a>查看服务器使用的Linux发行版的名称、版本号及描述信息等</h2><p><code>lsb_release -a</code></p><h2 id="查看服务器的平均负载"><a href="#查看服务器的平均负载" class="headerlink" title="查看服务器的平均负载"></a>查看服务器的平均负载</h2><p>感觉到系统压力较大时用可top或uptime查看下服务器的平均负载,uptime还可以查看linux服务器已经多少天未重启。</p><h2 id="查看系统整体性能情况"><a href="#查看系统整体性能情况" class="headerlink" title="查看系统整体性能情况"></a>查看系统整体性能情况</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[app@gj-app /]$ vmstat <span class="number">1</span> <span class="number">2</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> <span class="number">1</span>  <span class="number">0</span>    <span class="number">436</span> <span class="number">7113444</span>     <span class="number">84</span> <span class="number">11478856</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">100</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">0</span>  <span class="number">0</span>    <span class="number">436</span> <span class="number">7113444</span>     <span class="number">84</span> <span class="number">11478856</span>    <span class="number">0</span>    <span class="number">0</span>     <span class="number">0</span>     <span class="number">0</span> <span class="number">1071</span> <span class="number">2048</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">100</span>  <span class="number">0</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>参数介绍：<br><strong>mstat 1 2</strong>第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数</p><p>返回结果介绍：<br><strong>r</strong> 表示运行队列，一般负载超过了3就比较高；<br><strong>b</strong>表示阻塞的进程；swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了；<br><strong>free</strong>  空闲的物理内存的大小；<br><strong>buff</strong>  Linux/Unix系统是用来存储；<br><strong>cache</strong>cache直接用来记忆我们打开的文件,给文件做缓冲，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用；<br><strong>si</strong> 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉；<br><strong>so</strong> 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上；<br><strong>bi</strong> 设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备；<br><strong>bo</strong>  块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整;<br><strong>in</strong> 每秒CPU的中断次数，包括时间中断;<br><strong>cs</strong> 每秒上下文切换次数，值要越小越好，过大要考虑调低线程或者进程的数目;<br><strong>us</strong> 用户CPU时间<br><strong>sy</strong> 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。<br><strong>id</strong>  空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。<br><strong>wt</strong> 等待IO CPU时间。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">系统</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> uname -a <span class="comment"># 查看内核/操作系统/CPU信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> head -n 1 /etc/issue <span class="comment"># 查看操作系统版本</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat /proc/cpuinfo <span class="comment"># 查看CPU信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hostname <span class="comment"># 查看计算机名</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lspci -tv <span class="comment"># 列出所有PCI设备</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lsusb -tv <span class="comment"># 列出所有USB设备</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lsmod <span class="comment"># 列出加载的内核模块</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> env <span class="comment"># 查看环境变量</span></span></span><br><span class="line">资源</span><br><span class="line"><span class="meta">#</span><span class="bash"> free -m <span class="comment"># 查看内存使用量和交换区使用量</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> df -h <span class="comment"># 查看各分区使用情况</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> du -sh &lt;目录名&gt; <span class="comment"># 查看指定目录的大小</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep MemTotal /proc/meminfo <span class="comment"># 查看内存总量</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep MemFree /proc/meminfo <span class="comment"># 查看空闲内存量</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uptime <span class="comment"># 查看系统运行时间、用户数、负载</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat /proc/loadavg <span class="comment"># 查看系统负载</span></span></span><br><span class="line">磁盘和分区</span><br><span class="line"><span class="meta">#</span><span class="bash"> mount | column -t <span class="comment"># 查看挂接的分区状态</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fdisk -l <span class="comment"># 查看所有分区 </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> swapon -s <span class="comment"># 查看所有交换分区</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hdparm -i /dev/hda <span class="comment"># 查看磁盘参数(仅适用于IDE设备)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dmesg | grep IDE <span class="comment"># 查看启动时IDE设备检测状况</span></span></span><br><span class="line">网络</span><br><span class="line"><span class="meta">#</span><span class="bash"> ifconfig <span class="comment"># 查看所有网络接口的属性</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -L <span class="comment"># 查看防火墙设置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> route -n <span class="comment"># 查看路由表</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -lntp <span class="comment"># 查看所有监听端口</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -antp <span class="comment"># 查看所有已经建立的连接</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -s <span class="comment"># 查看网络统计信息</span></span></span><br><span class="line">进程</span><br><span class="line"><span class="meta">#</span><span class="bash"> ps -ef <span class="comment"># 查看所有进程</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> top <span class="comment"># 实时显示进程状态</span></span></span><br><span class="line">用户</span><br><span class="line"><span class="meta">#</span><span class="bash"> w <span class="comment"># 查看活动用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> id &lt;用户名&gt; <span class="comment"># 查看指定用户信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> last <span class="comment"># 查看用户登录日志</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cut -d: -f1 /etc/passwd <span class="comment"># 查看系统所有用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cut -d: -f1 /etc/group <span class="comment"># 查看系统所有组</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> crontab -l <span class="comment"># 查看当前用户的计划任务</span></span></span><br><span class="line">服务</span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig --list <span class="comment"># 列出所有系统服务</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig --list | grep on <span class="comment"># 列出所有启动的系统服务</span></span></span><br><span class="line">程序</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qa <span class="comment"># 查看所有安装的软件包</span></span></span><br><span class="line">常用命令整理如下：</span><br><span class="line">查看主板的序列号: dmidecode | grep -i ’serial number’</span><br><span class="line">用硬件检测程序kuduz探测新硬件：service kudzu start ( or restart)</span><br><span class="line">查看CPU信息：cat /proc/cpuinfo [dmesg | grep -i 'cpu'][dmidecode -t processor]</span><br><span class="line">查看内存信息：cat /proc/meminfo [free -m][vmstat]</span><br><span class="line">查看板卡信息：cat /proc/pci</span><br><span class="line">查看显卡/声卡信息：lspci |grep -i ‘VGA’[dmesg | grep -i 'VGA']</span><br><span class="line">查看网卡信息：dmesg | grep -i ‘eth’[cat /etc/sysconfig/hwconf | grep -i eth][lspci | grep -i 'eth']  </span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">查看PCI信息：lspci (相比cat /proc/pci更直观）</span><br><span class="line">查看USB设备：cat /proc/bus/usb/devices</span><br><span class="line">查看键盘和鼠标:cat /proc/bus/input/devices</span><br><span class="line">查看系统硬盘信息和使用情况：fdisk &amp; disk – l &amp; df</span><br><span class="line">查看各设备的中断请求(IRQ):cat /proc/interrupts</span><br><span class="line">查看系统体系结构：uname -a</span><br><span class="line">查看及启动系统的32位或64位内核模式：isalist –v [isainfo –v][isainfo –b]</span><br><span class="line">dmidecode查看硬件信息，包括bios、cpu、内存等信息</span><br><span class="line">测定当前的显示器刷新频率：/usr/sbin/ffbconfig –rev \?</span><br><span class="line">查看系统配置：/usr/platform/sun4u/sbin/prtdiag –v</span><br><span class="line">查看当前系统中已经应用的补丁：showrev –p</span><br><span class="line">显示当前的运行级别：who –rH</span><br><span class="line">查看当前的bind版本信息：nslookup –class=chaos –q=txt version.bind</span><br><span class="line">dmesg | more 查看硬件信息</span><br><span class="line">lspci 显示外设信息, 如usb，网卡等信息</span><br><span class="line">lsnod 查看已加载的驱动</span><br><span class="line">lshw</span><br><span class="line">psrinfo -v 查看当前处理器的类型和速度（主频）</span><br><span class="line">prtconf -v 打印当前的OBP版本号   </span><br><span class="line">iostat –E 查看硬盘物理信息(vendor, RPM, Capacity)</span><br><span class="line">prtvtoc /dev/rdsk/c0t0d0s 查看磁盘的几何参数和分区信息</span><br><span class="line">df –F ufs –o i 显示已经使用和未使用的i-node数目</span><br><span class="line">isalist –v</span><br><span class="line">对于“/proc”中文件可使用文件查看命令浏览其内容，文件中包含系统特定信息：</span><br><span class="line">Cpuinfo 主机CPU信息</span><br><span class="line">Dma 主机DMA通道信息</span><br><span class="line">Filesystems 文件系统信息</span><br><span class="line">Interrupts 主机中断信息</span><br><span class="line">Ioprots 主机I/O端口号信息</span><br><span class="line">Meninfo 主机内存信息</span><br><span class="line">Version Linux内存版本信息</span><br></pre></td></tr></table></figure><blockquote><p>文章参考互联网，可以参考<code>LINUX查看硬件配置命令</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;最近项目上部署环境后系统访问速度极慢，于是检查了一下服务器的配置，主要用到了以下的命令&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;查看服务器的CPU信息&quot;&gt;&lt;a href=&quot;#查看服务器的CPU信息&quot; class=&quot;he
      
    
    </summary>
    
      <category term="linux" scheme="http://loganwz.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://loganwz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>院子</title>
    <link href="http://loganwz.com/2019/08/17/logan17yyhyz/"/>
    <id>http://loganwz.com/2019/08/17/logan17yyhyz/</id>
    <published>2019-08-17T09:49:21.000Z</published>
    <updated>2019-10-26T02:01:45.728Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>故乡是四维的，空间三维加上时间一维。故乡不仅是一片土地，而是那片土地上的那一段岁月里的那一些人。</em></p></blockquote><p>   上周老爸把家里随便找的笔记本带到前边用，后来发现每本的前几页都画满了密密麻麻的涂鸦，看了很久才敢肯定是自己当年画的，十几年前的童年显得格外遥远和陌生。</p><p>   童年的记忆总是与爷爷的院子相缠绕。爷爷的院子里总是有数不清的“宝藏”，在夏天，蝉鸣是院子的背景音，绿色是院子的背景色。晴天院子门口的槐树荫下可以弹玻璃球,玩四驱车；碰到一场大雨就躲在屋里看着电视玩游戏王，那时候电视还放着还珠格格、少林寺传奇；等到雨停后满院子里能找到将要破土而出的知了龟，以及不远处小河里呱呱吵得要命的青蛙。</p><p>   爷爷的院子就像是全家的总指挥部，逢年过节都召唤齐漂泊在外的家人。五个家庭六个孩子就这样紧紧的联系在一起。每当寒暑假哥哥姐姐们都会来爷爷家住上一段时间，我们在夏天与风扇冷饮度过，在冬天也伴随整个春节，一起放鞭炮看春晚拜年。那是一年内最期待的日子。</p><p>   后来六个孩子渐渐长大，四处求学工作结婚生子为各自的事情忙碌，爷爷的院子再没有人住下来。每年团聚也只有春节那几天，但大家都知道，爷爷在家族就在。</p><p>   该怎么描述爷爷呢？好像打记事起他就是那样，在他的院子里拄着一根拐杖慢慢的走着，耳朵很背总是要凑到耳朵上才能听清，每天早上总会冲一杯鸡蛋和桃酥，总会指着屋里的各种吃的让我们吃，我们在的时候每天中午泡茶都会给我们拿出几个茶碗倒满，如果哪天我们突然不喝了反而会有些失落。</p><p>   写到这又想起院子里爷爷的身影，那是最美好的时光啊。</p><p>​                                                                                                                                                                           2019.08.16</p><p>​                                                                                        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;故乡是四维的，空间三维加上时间一维。故乡不仅是一片土地，而是那片土地上的那一段岁月里的那一些人。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   上周老爸把家里随便找的笔记本带到前边用，后来发现每本的前几页都画满了密密麻麻的涂鸦，
      
    
    </summary>
    
      <category term="随笔" scheme="http://loganwz.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://loganwz.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Oracle存储过程实例</title>
    <link href="http://loganwz.com/2019/08/01/log16procedure/"/>
    <id>http://loganwz.com/2019/08/01/log16procedure/</id>
    <published>2019-08-01T08:59:00.000Z</published>
    <updated>2019-08-01T09:09:27.576Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>存储过程(Stored Procedure)是一组用于完成特定数据库功能的SQL语句集，SQL集包含了所要进行的各种处理，经过编译后存储在数据库系统中。在使用时候，用户通过指定已经定义的存储过程名字并给出相应的存储过程参数来调用并执行它，得到想要的结果。<br>使用工具：plsql、Oracle</p></blockquote><p>Oracle存储过程保存在数据库procedures下，基本写法如下：<br><strong>1.基本结构</strong><br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE <span class="keyword">OR</span> REPLACE <span class="function"><span class="keyword">PROCEDURE</span> 存储过程名称  </span></span><br><span class="line"><span class="function"> <span class="title">IS</span>  <span class="comment">//声明  </span></span></span><br><span class="line"><span class="function"> ;</span>  </span><br><span class="line"> <span class="keyword">BEGIN</span> <span class="comment">// 执行  </span></span><br><span class="line"><span class="comment">//要实现的逻辑功能</span></span><br><span class="line"> ;  </span><br><span class="line"> EXCEPTION<span class="comment">//存储过程异常操作  </span></span><br><span class="line"> ;  </span><br><span class="line"> <span class="keyword">END</span> 存储过程名称;</span><br></pre></td></tr></table></figure></p><p>在存储过程(PROCEDURE)和函数(FUNCTION)中没有区别；<br>在视图(VIEW)中只能用AS不能用IS；<br>在游标(CURSOR)中只能用IS不能用AS<br><strong>2. 无参的存储过程</strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建了一个无参的存储过程，输出procedure testeeee11</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">TEST1</span> <span class="title">IS</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">  <span class="title">DBMS_OUTPUT</span>.<span class="title">PUT_LINE</span><span class="params">(<span class="string">'procedure testeeee11'</span>)</span>;</span></span><br><span class="line"><span class="keyword">END</span> TEST1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用你的存储过程</span></span><br><span class="line">DECLARE</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  TEST1;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p>按F8执行编译后，存储过程不能直接执行，新建一个测试窗口，调用存储过程，按F8执行即可在输出中看到结果。<br><strong>3. 有参的存储过程</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//模糊查询到结果的数量</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> TEST4(TSKNAME <span class="keyword">IN</span> <span class="keyword">NVARCHAR2</span>, COUNTS <span class="keyword">OUT</span> <span class="built_in">NUMBER</span>) <span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> COUNTS <span class="keyword">FROM</span> TASK_INFO <span class="keyword">WHERE</span> TASKNAME <span class="keyword">LIKE</span> <span class="string">'%'</span>||TSKNAME||<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">END</span> TEST4;</span><br><span class="line"></span><br><span class="line">//调用存储过程，传入对应的参数</span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">  COUNTS <span class="built_in">NUMBER</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  TEST4(<span class="string">'假'</span>,COUNTS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE('符合条件的数量为：'||COUNTS);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p>其中存储过程的参数分为in、out和in out三种模式<br>in:用于接收参数，在子程序内部，不能进行修改<br>out:表示返回值参数<br>int out:表示该参数可以向该过程中传递值，也可以将某个值输出</p><p><strong>4. if判断：</strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加if判断</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">TEST5</span><span class="params">(TSKNAME <span class="keyword">IN</span> NVARCHAR2,COUNTS <span class="keyword">OUT</span> NUMBER,MESSAGE <span class="keyword">OUT</span> NVARCHAR2)</span> <span class="title">AS</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">  <span class="title">SELECT</span> <span class="title">COUNT</span><span class="params">(*)</span> <span class="title">INTO</span> <span class="title">COUNTS</span> <span class="title">FROM</span> <span class="title">TASK_INFO</span> <span class="title">WHERE</span> <span class="title">TASKNAME</span> <span class="title">LIKE</span> '%'||<span class="title">TSKNAME</span>||'%';</span></span><br><span class="line">  <span class="keyword">IF</span> COUNTS &gt;<span class="number">5</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">BEGIN</span> </span><br><span class="line">       MESSAGE:= <span class="string">'相似数据过多'</span>;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="keyword">IF</span> COUNTS &lt;<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">      MESSAGE:=<span class="string">'数据量不足'</span>;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> TEST5;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">DECLARE </span><br><span class="line">  COUNTS INT:=<span class="number">0</span>;</span><br><span class="line">  MESSAGE NVARCHAR2(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  TEST5(<span class="string">'假数据1'</span>,COUNTS,MESSAGE);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">'查询到的数量为：'</span>||COUNTS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">'输出的信息为：'</span>||MESSAGE);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p><strong>5. loop循环：</strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用循环</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">TEST5</span><span class="params">(COUNTS <span class="keyword">OUT</span> NUMBER)</span> <span class="title">AS</span></span></span><br><span class="line"><span class="function"><span class="title">NUM</span> <span class="title">INT</span>;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  NUM:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> COUNT<span class="comment">(*) INTO COUNTS FROM TASK_INFO WHERE ID = NUM;</span></span><br><span class="line"><span class="comment">  WHILE NUM &lt; 10 LOOP</span></span><br><span class="line"><span class="comment">    BEGIN</span></span><br><span class="line"><span class="comment">      SELECT COUNT(*)</span> <span class="keyword">INTO</span> COUNTS <span class="keyword">FROM</span> TASK_INFO <span class="keyword">WHERE</span> ID = NUM;</span><br><span class="line">      DBMS_OUTPUT.PUT_LINE(<span class="string">'我已经执行了一次：'</span>||NUM);</span><br><span class="line">      NUM:= NUM+<span class="number">1</span>;</span><br><span class="line">      COUNTS:= NUM;</span><br><span class="line">  <span class="keyword">END</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">END</span> TEST5;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">DECLARE </span><br><span class="line">  COUNTS INT:=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  TEST5(COUNTS);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">'最终的数量为：'</span>||COUNTS);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></p><p><strong>6. 对数据库的添加</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> TEST_ADD</span><br><span class="line">(<span class="keyword">ID</span> <span class="built_in">NUMBER</span>,CREATETIME <span class="built_in">DATE</span>,TASKNAME <span class="built_in">VARCHAR</span>,</span><br><span class="line"><span class="keyword">CONTENT</span> <span class="built_in">VARCHAR</span>,REMARK <span class="built_in">VARCHAR</span>)</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> TASK_INFO <span class="keyword">VALUES</span>(<span class="keyword">ID</span>,TASKNAME,<span class="keyword">CONTENT</span>,REMARK,CREATETIME);</span><br><span class="line"><span class="keyword">COMMIT</span>;//提交事务</span><br><span class="line"><span class="keyword">END</span> TEST_ADD;</span><br></pre></td></tr></table></figure></p><p><strong>7. 异常处理：</strong><br><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXCEPTION</span><br><span class="line"><span class="keyword">WHEN</span> 异常类型 <span class="keyword">THEN</span> </span><br><span class="line">RAISE_APPLICATION_ERROR(<span class="number">-20010</span>, <span class="string">'提示信息'</span>);</span><br><span class="line"><span class="keyword">WHEN</span> 异常类型 <span class="keyword">THEN</span> </span><br><span class="line">RAISE_APPLICATION_ERROR(<span class="number">-20011</span>, <span class="string">'提示信息'</span>);</span><br></pre></td></tr></table></figure></p><p>更多关于异常处理参考：<a href="https://www.cnblogs.com/liuguanghai/p/5460825.html" target="_blank" rel="noopener">Oracle存储过程的异常处理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;存储过程(Stored Procedure)是一组用于完成特定数据库功能的SQL语句集，SQL集包含了所要进行的各种处理，经过编译后存储在数据库系统中。在使用时候，用户通过指定已经定义的存储过程名字并给出相应的存储过程参数来调用并执行它，得到想要的
      
    
    </summary>
    
      <category term="Oracle" scheme="http://loganwz.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://loganwz.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>关于Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required报错解决</title>
    <link href="http://loganwz.com/2019/04/22/log15myBatis1/"/>
    <id>http://loganwz.com/2019/04/22/log15myBatis1/</id>
    <published>2019-04-22T06:51:00.000Z</published>
    <updated>2019-04-22T07:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做毕设的时候，看到网上有个不错的项目，本地初始化搭建项目的时候遇到一个错误，困扰了大半天时间。<br>报错信息如下：<br><a id="more"></a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>-Apr-2019 <span class="number">14</span>:<span class="number">43</span>:<span class="number">37</span>.<span class="number">205</span> 警告 [RMI TCP Connection(<span class="number">3</span>)-<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>] <span class="keyword">org.springframework.web.context.support.XmlWebApplicationContext.refresh </span>Exception encountered during <span class="built_in">context</span> initialization - cancelling refresh attempt: <span class="keyword">org.springframework.beans.factory.UnsatisfiedDependencyException: </span>Error creating <span class="keyword">bean </span>with name <span class="string">'ArticleService'</span>: Unsatisfied dependency expressed through field <span class="string">'articleDao'</span><span class="comment">; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ArticleDao' defined in file [G:\myProject\myBlog\target\myBlog\WEB-INF\classes\com\logan\blog\dao\impl\ArticleDaoImpl.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required</span></span><br><span class="line"><span class="number">22</span>-Apr-2019 <span class="number">14</span>:<span class="number">43</span>:<span class="number">37</span>.<span class="number">207</span> 严重 [RMI TCP Connection(<span class="number">3</span>)-<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>] <span class="keyword">org.springframework.web.context.ContextLoader.initWebApplicationContext </span><span class="built_in">Context</span> initialization failed</span><br><span class="line"><span class="symbol"> org.springframework.beans.factory.UnsatisfiedDependencyException:</span> Error creating <span class="keyword">bean </span>with name <span class="string">'ArticleService'</span>: Unsatisfied dependency expressed through field <span class="string">'articleDao'</span><span class="comment">; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ArticleDao' defined in file [G:\myProject\myBlog\target\myBlog\WEB-INF\classes\com\logan\blog\dao\impl\ArticleDaoImpl.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required</span></span><br><span class="line"><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:866)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:443)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:325)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4753)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5215)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:754)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:730)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1736)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.<span class="keyword">java:62)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.<span class="keyword">java:43)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.lang.reflect.Method.invoke(Method.java:498)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> com.sun.<span class="keyword">jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> com.sun.<span class="keyword">jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:482)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:431)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.<span class="keyword">java:62)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.<span class="keyword">java:43)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.lang.reflect.Method.invoke(Method.java:498)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:300)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> com.sun.<span class="keyword">jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> com.sun.<span class="keyword">jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line"><span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.<span class="keyword">java:62)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.<span class="keyword">java:43)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.lang.reflect.Method.invoke(Method.java:498)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.server.UnicastServerRef.<span class="keyword">dispatch(UnicastServerRef.java:361)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.transport.Transport$<span class="number">1</span>.run(Transport.<span class="keyword">java:200)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.transport.Transport$<span class="number">1</span>.run(Transport.<span class="keyword">java:197)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.security.AccessController.doPrivileged(Native </span>Method)</span><br><span class="line"><span class="built_in">at</span> sun.rmi.transport.Transport.serviceCall(Transport.<span class="keyword">java:196)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.<span class="keyword">java:568)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.<span class="keyword">java:826)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$<span class="number">0</span>(TCPTransport.<span class="keyword">java:683)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.security.AccessController.doPrivileged(Native </span>Method)</span><br><span class="line"><span class="built_in">at</span> sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.<span class="keyword">java:682)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></span><br><span class="line"><span class="keyword"></span><span class="built_in">at</span> <span class="keyword">java.lang.Thread.run(Thread.java:748)</span></span><br></pre></td></tr></table></figure><p>主要错误信息为：<code>Property &#39;sqlSessionFactory&#39; or &#39;sqlSessionTemplate&#39; are required</code><br>涉及到的代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"ArticleDao"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="title">implements</span> <span class="title">ArticleDao</span> </span>&#123;</span><br><span class="line">   ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>错误的主要原因为在Dao的实现类中继承了<code>SqlSessionDaoSupport</code>来实现SqlSessionFactory的自动注入，然后通过this.getSqlSession()拿到SqlSession。<br>但是这种写法在mybatis-spring整合包的版本为1.2.0之前是没有问题的，但后续的版本取消了自动注入，当引入的依赖包版本大于1.2.0后就会报错。</p><p>解决方法：<br>创建一个适用于所有Dao的基类CommonDao，通过CommonDao来继承SqlSessionDaoSupport，通过set方法注入SqlSessionFactory，这样就不会报错了。<br>写法如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CommonDao</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    public void setSqlSessionFactory(<span class="type">SqlSessionFactory</span> sqlSessionFactory) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setSqlSessionFactory(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用时再将继承换成CommonDao即可：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArticleDaoImpl</span> <span class="keyword">extends</span> <span class="title">CommonDao</span> <span class="title">implements</span> <span class="title">ArticleDao</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做毕设的时候，看到网上有个不错的项目，本地初始化搭建项目的时候遇到一个错误，困扰了大半天时间。&lt;br&gt;报错信息如下：&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HttpURLConnection的使用</title>
    <link href="http://loganwz.com/2019/03/15/log14http/"/>
    <id>http://loganwz.com/2019/03/15/log14http/</id>
    <published>2019-03-15T11:17:00.000Z</published>
    <updated>2019-07-22T06:34:02.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两种请求方式"><a href="#两种请求方式" class="headerlink" title="两种请求方式"></a>两种请求方式</h2><p>URL请求通常有两种方式：GET请求和POST请求<br>    <strong>GET请求</strong>的数据会附在URL之后，通过?来拼接所传的参数，参数之间以&amp;相连。请求中发送的参数如果是字母或者数字则按照原样发送，空格则转换为+，中文或者其他字符则按照base64位加密，得到<code>%E4%BD%A0%E5%A5%BD</code>类似的形式，其中%xx为该符号以16进制表示的ASCII码。<br>​    <strong>POST请求</strong>的参数不是放在URL字符串里面，而是放在HTTP请求的正文内，请求的参数被封装起来以流的形式发送给服务端。<br>    ​    <a id="more"></a></p><pre><code>两者主要的区别：GET请求参数直接拼接在URL后面，隐私性较差，长度可能会受限制，GET请求能够被缓存，一般请求的默认为GET；POST请求通过实体内容传参数隐私性好，大小没有限制，POST请求不能被缓存下来，需要声明采用POST。一般，Get是向服务器索取数据的一种请求，而Post是向服务器提交数据的一种请求。</code></pre><h2 id="HttpURLConnection使用"><a href="#HttpURLConnection使用" class="headerlink" title="HttpURLConnection使用"></a>HttpURLConnection使用</h2><p>HttpURLConnection它继承自URLConnection，可用于向指定网站发送GET请求、POST请求。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">URL url = new URL(<span class="string">"URL"</span>);</span><br><span class="line">HttpURLConnection<span class="built_in"> connection </span>= (HttpURLConnection) url.openConnection();</span><br><span class="line">connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">connection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">connection.setInstanceFollowRedirects(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>1.通过调用URL.openConnection()来获得一个新的HttpURLConnection对象,结果强制转换为HttpURLConnection<br>2.准备请求。参数为URI。请求头可能也包含元数据，例如证书或者约定好的请求内容。<br>3.可以选择性的上传一个请求体。HttpURLConnection实例必须设置<code>setDoOutput(true)</code>，如果它包含一个请求体。通过将数据写入一个由getOutStream()返回的输出流来传输数据。<br>4.读取响应。响应头通常包含元数据例如响应体的内容类型和长度，修改日期和会话cookies。响应体可以被由getInputStream返回的输入流读取。如果响应没有响应体，则该方法会返回一个空的流。<br>5.关闭连接。一旦一个响应体已经被阅读后，HttpURLConnection 对象应该通过调用disconnect()关闭。断开连接会释放被一个connection占有的资源，这样它们就能被关闭或再次使用。</p></blockquote><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h3 id="创建url实例（基本固定）"><a href="#创建url实例（基本固定）" class="headerlink" title="创建url实例（基本固定）"></a>创建url实例（基本固定）</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">URL url</span>=new URL(<span class="string">"请求的url"</span>);</span><br><span class="line"><span class="attribute">HttpURLConnection connection</span>= (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure><h3 id="连接设置"><a href="#连接设置" class="headerlink" title="连接设置"></a>连接设置</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(<span class="string">"POST"</span>);<span class="regexp">//</span>设置请求方式，默认为GET</span><br><span class="line">connection.setDoOutput(<span class="keyword">true</span>);<span class="regexp">//</span>设置是否向httpUrlConnection输出，post请求，参数要放在http正文内，需要设为<span class="keyword">true</span>； 默认情况下是<span class="keyword">false</span>。</span><br><span class="line">connection.setDoInput(<span class="keyword">true</span>);<span class="regexp">//</span>是否从httpUrlConnection读入，默认情况下是<span class="keyword">true</span>; </span><br><span class="line">connection.setUseCaches(<span class="keyword">false</span>);<span class="regexp">//</span>设置是否使用缓存，Post请求不能缓存 </span><br><span class="line">connection.setInstanceFollowRedirects(<span class="keyword">true</span>);<span class="regexp">//</span>设置超时时间</span><br></pre></td></tr></table></figure><h3 id="设置请求头参数"><a href="#设置请求头参数" class="headerlink" title="设置请求头参数"></a>设置请求头参数</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestProperty(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">setRequestProperty（<span class="built_in">key</span>，<span class="built_in">value</span>）;</span><br><span class="line">addRequestProperty(<span class="built_in">key</span>,<span class="built_in">value</span>);</span><br></pre></td></tr></table></figure><p>setRequestProperty会覆盖已经存在的key的所有values，有清零重新赋值的作用。而addRequestProperty则是在原来key的基础上继续添加其他value。</p><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.connect()<span class="comment">;</span></span><br><span class="line">getOutputStream</span><br></pre></td></tr></table></figure><p>getOutputStream会隐含的进行connect(等同于调用上面的connect()方法， 不调用connect()也可以) </p><h3 id="获取响应"><a href="#获取响应" class="headerlink" title="获取响应"></a>获取响应</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">connection</span><span class="selector-class">.getContent</span>()</span><br><span class="line"><span class="selector-tag">connection</span><span class="selector-class">.getInputStream</span>()</span><br><span class="line"><span class="selector-tag">connection</span><span class="selector-class">.getHeaderField</span> ()</span><br></pre></td></tr></table></figure><p>对于大部分请求，getInputStream和getContent最常用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两种请求方式&quot;&gt;&lt;a href=&quot;#两种请求方式&quot; class=&quot;headerlink&quot; title=&quot;两种请求方式&quot;&gt;&lt;/a&gt;两种请求方式&lt;/h2&gt;&lt;p&gt;URL请求通常有两种方式：GET请求和POST请求&lt;br&gt;    &lt;strong&gt;GET请求&lt;/strong&gt;的数据会附在URL之后，通过?来拼接所传的参数，参数之间以&amp;amp;相连。请求中发送的参数如果是字母或者数字则按照原样发送，空格则转换为+，中文或者其他字符则按照base64位加密，得到&lt;code&gt;%E4%BD%A0%E5%A5%BD&lt;/code&gt;类似的形式，其中%xx为该符号以16进制表示的ASCII码。&lt;br&gt;​    &lt;strong&gt;POST请求&lt;/strong&gt;的参数不是放在URL字符串里面，而是放在HTTP请求的正文内，请求的参数被封装起来以流的形式发送给服务端。&lt;br&gt;    ​
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>XML文件的读取</title>
    <link href="http://loganwz.com/2019/03/06/log21xml/"/>
    <id>http://loganwz.com/2019/03/06/log21xml/</id>
    <published>2019-03-06T02:10:00.000Z</published>
    <updated>2019-03-06T07:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML文件介绍"><a href="#XML文件介绍" class="headerlink" title="XML文件介绍"></a>XML文件介绍</h2><p>XML是指可扩展标记语言（EXtensible Markup Language），主要用来互联网数据传输，可以跨平台，不收任何编程语言和操作系统的限制。XML旨在传输数据，HTML旨在展示数据。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上为XML实例，第一行为XML声明，定义了XML的版本为（1.0）和所用编码为（utf-8）</p><h3 id="XML文件主要有以下几个元素："><a href="#XML文件主要有以下几个元素：" class="headerlink" title="XML文件主要有以下几个元素："></a>XML文件主要有以下几个元素：</h3><p><strong>根元素：</strong><br>实例第二行，在xml文件中唯一，开始放在最前面，结尾放在最后面<br><strong>子元素：</strong><br>实例第三行，所有子元素必须有结束标签</p><blockquote><p>子元素的命名规则：</p><ul><li>标签对大小写敏感,名称中可以包含字母、数字或者其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称中不能包含空格</li></ul></blockquote><p>获取XML内容<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.<span class="built_in">Element</span>;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Node;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Iterator</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">List</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * Created by LLLLogan on 2019/3/6.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span> []args) throws DocumentException&#123;</span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        Document <span class="built_in">document</span> = reader.read(<span class="keyword">new</span> File(<span class="string">"src/xmlfile/test.xml"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文档根节点</span></span><br><span class="line">        <span class="built_in">Element</span> root = <span class="built_in">document</span>.getRootElement();</span><br><span class="line">        <span class="comment">//输出根节点的名称</span></span><br><span class="line">        System.out.println(root.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取根节点下面的所有子节点（不含子节点下的子节点）</span></span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Element</span>&gt; list = root.elements();</span><br><span class="line">        <span class="comment">//遍历list方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">Element</span> e:list)&#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(e.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定节点下面的子节点</span></span><br><span class="line">        <span class="built_in">Element</span> contactElem = root.element(<span class="string">"contact"</span>);<span class="comment">//首先要知道自己要操作的节点。</span></span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Element</span>&gt; contactList = contactElem.elements();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">Element</span> e:contactList)&#123;</span><br><span class="line">            System.out.println(e.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用获取子节点的递归函数</span></span><br><span class="line">        <span class="comment">//getChild</span></span><br><span class="line">        getChildNodes(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得当前标签下指定名称的节点</span></span><br><span class="line">        <span class="built_in">Element</span> conEle = root.element(<span class="string">"contact"</span>);</span><br><span class="line">        System.out.println(conEle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得更深层次的标签（一层一层查询）</span></span><br><span class="line">        <span class="built_in">Element</span> aaa = root.element(<span class="string">"contact"</span>).element(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> getChildNodes(<span class="built_in">Element</span> element)&#123;</span><br><span class="line">        System.out.println(element.getName());</span><br><span class="line">        <span class="built_in">Iterator</span>&lt;Node&gt; iterator = element.nodeIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Node node = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (node instanceof <span class="built_in">Element</span>)&#123;</span><br><span class="line">                <span class="built_in">Element</span> e1 = (<span class="built_in">Element</span>)node;</span><br><span class="line">                getChildNodes(e1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XML文件介绍&quot;&gt;&lt;a href=&quot;#XML文件介绍&quot; class=&quot;headerlink&quot; title=&quot;XML文件介绍&quot;&gt;&lt;/a&gt;XML文件介绍&lt;/h2&gt;&lt;p&gt;XML是指可扩展标记语言（EXtensible Markup Language），主要用来互联网数据
      
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库快速扫盲</title>
    <link href="http://loganwz.com/2019/03/04/log13oraDB/"/>
    <id>http://loganwz.com/2019/03/04/log13oraDB/</id>
    <published>2019-03-04T02:30:00.000Z</published>
    <updated>2019-07-29T10:31:01.680Z</updated>
    
    <content type="html"><![CDATA[<p>之前只用过MySQL数据库，在第一次接触Oracle数据库时很多不一样的概念很困惑，通过网上查询资料对Oracle有了一定的了解。</p><p>这篇主要包括Oracle的一些概念，包括简单的sql语句，关于sql语法还会再总结一篇…<br><a id="more"></a></p><h2 id="Oracle和MySQL的区别"><a href="#Oracle和MySQL的区别" class="headerlink" title="Oracle和MySQL的区别"></a>Oracle和MySQL的区别</h2><ul><li>Oracle默认端口：1521 默认用户为System；MySQL默认端口3306 默认用户root</li><li>Oracle语法较为严格，MySQL语法灵活</li><li>Oracle是通过表空间管理；MySQL不是</li></ul><h2 id="Oracle数据库的一些概念"><a href="#Oracle数据库的一些概念" class="headerlink" title="Oracle数据库的一些概念"></a>Oracle数据库的一些概念</h2><h3 id="“数据库”"><a href="#“数据库”" class="headerlink" title="“数据库”"></a>“数据库”</h3><p>Oracle数据库是数据的物理存储，包括（数据文件ORA或者DBF、控制文件、联机日志、参数文件），Oracle数据库的概念和其他数据库不同，这里的数据库是一个操作系统只有一个库，包含物理数据、数据库管理系统（即物理数据、内存、操作系统进程的组合体），可以理解为Oracle只有一个大数据库。</p><h3 id="“数据库实例”"><a href="#“数据库实例”" class="headerlink" title="“数据库实例”"></a>“数据库实例”</h3><p>一个数据库可以有n个实例</p><blockquote><p>Oracle官方描述：实例是访问Oracle数据库所需的一部分计算机内存和辅助处理后台进程，是由进程和这些进程所使用的内存(SGA)所构成一个集合。其实就是用来访问和使用数据库的一块进程，它只存在于内存中。就像Java中new出来的实例对象一样。我们访问Oracle都是访问一个实例，但这个实例如果关联了数据库文件，就是可以访问的，如果没有，就会得到实例不可用的错误。</p></blockquote><h3 id="“数据文件”"><a href="#“数据文件”" class="headerlink" title="“数据文件”"></a>“数据文件”</h3><p>数据文件是数据库的物理存储单位，数据库的数据存储在表空间中，实际上真正存储在某一个或多个数据文件中。<br>一个表空间可以由一个或多个数据文件组成，一个数据文件只能属于一个表空间。<strong>一旦数据文件被加入到某个表空间，就不能删除这个文件，如果要删除某个数据文件，只能删除对应的表空间。</strong></p><h3 id="“表空间”"><a href="#“表空间”" class="headerlink" title="“表空间”"></a>“表空间”</h3><p>表空间是一个用来管理数据存储逻辑概念，表空间只是和数据文件（ORA或者DBF文件）发生关系，数据文件是物理的，一个表空间可以包含多个数据文件，而一个数据文件只能隶属一个表空间，一个表空间只能属于一个数据库。<br>Oracle数据库是通过表空间来存储物理表的，一个数据库实例可以有N个表空间，一个表空间下可以有N张表。有了数据库，<br>就可以创建表空间。<br>表空间(tablespace)是数据库的逻辑划分，每个数据库至少有一个表空间(称作SYSTEM表空间)。为了便于管理和提高运行效率，可以使用一些附加表空间来划分用户和应用程序。例如：USER表空间供一般用户使用，RBS表空间供回滚段使用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建表空间：</span><br><span class="line">//<span class="keyword">Create</span> <span class="keyword">TableSpace</span> 表空间名称</span><br><span class="line">//       <span class="keyword">DataFile</span> 表空间数据文件路径</span><br><span class="line">//       <span class="keyword">Size</span> 表空间初始大小</span><br><span class="line">//       <span class="keyword">Autoextend</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> db_test</span><br><span class="line">        <span class="keyword">datafile</span> <span class="string">'D:\oracle\product\10.2.0\userdata\db_test.dbf'</span></span><br><span class="line">        <span class="keyword">size</span> <span class="number">50</span>m</span><br><span class="line">        <span class="keyword">autoextend</span> <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure></p><h3 id="“用户”"><a href="#“用户”" class="headerlink" title="“用户”"></a>“用户”</h3><p>数据库创建完成后，要想在数据库里创建表，必须为数据库建立用户，并为用户指定表空间。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> USER aaa   <span class="comment">//用户名</span></span><br><span class="line">       IDENTIFIED <span class="keyword">BY</span> aaa123   <span class="comment">//密码  </span></span><br><span class="line">       <span class="keyword">DEFAULT</span> TABLESPACE db_test   <span class="comment">//设置表空间</span></span><br></pre></td></tr></table></figure></p><h2 id="用户赋权"><a href="#用户赋权" class="headerlink" title="用户赋权"></a>用户赋权</h2><p>创建用户，指定表空间之后，如果想要让该用户操作数据库，还需要给用户赋权。</p><h3 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h3><p><code>Connect</code>：临时用户角色<br><code>Resource</code>：正式用户角色<br><code>DBA</code>：管理员（一般不用）</p><h3 id="赋权基本语句"><a href="#赋权基本语句" class="headerlink" title="赋权基本语句"></a>赋权基本语句</h3><p><strong>赋予角色：</strong><br><code>Grant connect,resource to aaa</code><br><strong>撤销角色：</strong><br><code>Revoke connect,resource from aaa</code><br><strong>删除（撤销）用户：</strong><br><code>DROP USER 用户名</code><br><code>DROP USER 用户名 CASCAED  //CASCAED表示删除用户的同时删除其建立的实体</code><br><strong>操作赋权：</strong><br><code>Grant select on scott.db_test to aaa //将查询scott用户的db_test表的权限授予aaa用户</code></p><blockquote><p>文章内容主要来源：<a href="https://blog.csdn.net/qq_38986609/article/details/82501643" target="_blank" rel="noopener">https://blog.csdn.net/qq_38986609/article/details/82501643</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前只用过MySQL数据库，在第一次接触Oracle数据库时很多不一样的概念很困惑，通过网上查询资料对Oracle有了一定的了解。&lt;/p&gt;
&lt;p&gt;这篇主要包括Oracle的一些概念，包括简单的sql语句，关于sql语法还会再总结一篇…&lt;br&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://loganwz.com/categories/Oracle/"/>
    
    
      <category term="数据库" scheme="http://loganwz.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Oracle" scheme="http://loganwz.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>关于Tomcat运行的一点错误</title>
    <link href="http://loganwz.com/2019/02/26/logan12tomcat_error/"/>
    <id>http://loganwz.com/2019/02/26/logan12tomcat_error/</id>
    <published>2019-02-26T09:05:00.000Z</published>
    <updated>2019-08-16T13:30:06.839Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到多个版本的Tomcat时，出现了以前刚接触Tomcat时遇到的闪退现象。<br><a id="more"></a><br>以前配置Tomcat时也遇到过类似的错误，但是同样的方法并没有解决，最后发现这几次主要都是因为<code>JRE_HOME</code>的环境变量不正确。</p><blockquote><p>如果想要查看闪退的错误信息，可以在cmd中切换到bin路径下执行<code>startup.bat</code></p></blockquote><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816212818.png" alt=""></p><p>配置<code>JRE_HOME</code>所在的位置就是<code>bin\setclasspath.bat</code>，打开<code>setclasspath.bat</code>找到如图所示的位置：<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816212822.png" alt=""><br>错误很明显，这里已经直接指定了jdk的路径，因此解决方法可以是：<br><strong>删除指定的路径代码或者将指定的路径改成正确的路径</strong><br>再次运行startup.bat即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用到多个版本的Tomcat时，出现了以前刚接触Tomcat时遇到的闪退现象。&lt;br&gt;
    
    </summary>
    
      <category term="Tomcat" scheme="http://loganwz.com/categories/Tomcat/"/>
    
    
      <category term="Tomcat" scheme="http://loganwz.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>我的2018</title>
    <link href="http://loganwz.com/2018/12/31/logan11summaryof2018/"/>
    <id>http://loganwz.com/2018/12/31/logan11summaryof2018/</id>
    <published>2018-12-31T02:50:00.000Z</published>
    <updated>2019-08-16T13:29:37.295Z</updated>
    
    <content type="html"><![CDATA[<p>岁末将至，2018年马上过去。<br>刚刚结束了学校里的课程，离开学校前还有大大小小的事情要做。<br>年终总结不知不觉就被拖到了2018的最后一天，<br>回顾2018这一年，身边发生了许多的事情，<br>对于自己来说2018也是人生中最重要最值得铭记的一年。</p><a id="more"></a><h2 id="那些人"><a href="#那些人" class="headerlink" title="那些人"></a>那些人</h2><p>2018年最值得记录的就是身边一个又一个可爱的人，在这一年，认识了很多的朋友，有同一学校不同专业的<code>阿RUI</code>，一起呆了几个月懂得很多玩游戏也贼6的<code>老梁</code>，第一感觉有点小猥琐但人超好的<code>阿豪</code>；关于老朋友，有的许久不联系但路上偶遇总能兴致勃勃地谈一路，当然也包括那几个天天骂来骂去但喝酒绝不认怂的<code>舍友</code>。</p><p>还有那些令人尊敬的老师，无论是校外校内，他们亦师亦友，教会了我太多东西。</p><h2 id="那些日子"><a href="#那些日子" class="headerlink" title="那些日子"></a>那些日子</h2><h3 id="迷茫着"><a href="#迷茫着" class="headerlink" title="迷茫着"></a>迷茫着</h3><p>2018年的前几个月，过得实在是非常迷茫，总结成一个字：<code>丧</code>，每天跟着学校的课程，剩下的时间没有目的地去虚度，做过<code>兼职</code>；偶尔跟朋友<code>约饭</code>；在这期间把<code>python</code>的基础语法学了一遍，尝试着写了一个小<code>demo</code>。<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816212727.jpg" alt=""></p><h3 id="努力着"><a href="#努力着" class="headerlink" title="努力着"></a>努力着</h3><p>确定方向后事情就简单的多了，尽最大的努力去做就行了。</p><p>暑假前申请留校开始准备校招，9月底开始校招之旅，记得第一次是在本校参加一个省内软件公司的宣讲会，抱着试一试的态度，没有准备纸质简历，现场做了40分钟的笔试题，到场的人并不多，面试官看完笔试之后开始问问题，持续了20几分钟，每一个问题都弄得我一脸尴尬。首战告败（虽然最终给了offer，但是公司位置待遇都不太合适），真正让我懂得要学的东西还有太多。</p><p>之后的一个月，每一天都是在早上起床查看邮件，规划行程，奔波在从一个学校到另一个学校的路上，每天路上的时间超过5个小时，晚上在地铁上总结今天的收获。一场场宣讲会听下来，一场场笔试做下来，一次又一次的技术面、Hr面，笔试面试的经验多了，手里的offer也多了。每一场下来都有学到很多东西，也知道自己的短板在哪里。</p><p>站在年末回想起这奔波的40天，只能用<code>充实</code>、<code>忙碌</code>、<code>难忘</code>来描述。</p><h2 id="说点别的"><a href="#说点别的" class="headerlink" title="说点别的"></a>说点别的</h2><p><del><strong> 脸大了 </strong></del></p><p><del>体重并没有涨很多，但是脸为什么大了呢（可能肉只长脸上了）？虽然承认从小一直是头大，但是给别人的感觉也胖了….hahahahahahha</del></p><p><strong> 少熬夜，多走走 </strong></p><p>熬夜就不要熬夜了，这辈子是不想熬夜。这一年基本都是23点-24点之间入睡（失眠、重要时刻除外）。</p><p>千万不要久坐，深有体会。暑假8月份天天坐着写代码，然后肠胃炎反反复复半个多月，真的很难受。</p><h2 id="去年的目标实现了吗？"><a href="#去年的目标实现了吗？" class="headerlink" title="去年的目标实现了吗？"></a>去年的目标实现了吗？</h2><p>写这篇年终总结的时候，我一直在想去年我有立下Flag吗？<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816212731.jpg" alt="真的是去年的summary"><br>好像还真没有确切的<code>KPI</code>，那就不要脸的都算完成了吧。</p><h2 id="说说2019的小目标"><a href="#说说2019的小目标" class="headerlink" title="说说2019的小目标"></a>说说2019的小目标</h2><p>每到年末必然要展望新的一年，立下新的Flag。<br>好，列一下2019年的小目标：</p><ul><li>家人朋友健康平安</li><li>大学画一个圆满地句号</li><li>掌握几个框架，包括但不仅限于<code>AngularJS</code></li><li>补一下自己的短板，包括但不仅限于<code>算法及数据结构</code></li><li>多读书，买的书一定要好好利用</li><li>去不同的城市走一走（毕业旅游或者工作之余）</li><li>多运动，走一走</li><li>博客每月&gt;=2篇</li><li>好好工作，努力学习技术</li><li>写一个自己喜欢的项目</li></ul><p>暂时想到这些，其他目标随时增加。</p><blockquote><p>2019，keep going！<br>Hello SH！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;岁末将至，2018年马上过去。&lt;br&gt;刚刚结束了学校里的课程，离开学校前还有大大小小的事情要做。&lt;br&gt;年终总结不知不觉就被拖到了2018的最后一天，&lt;br&gt;回顾2018这一年，身边发生了许多的事情，&lt;br&gt;对于自己来说2018也是人生中最重要最值得铭记的一年。&lt;/p&gt;
    
    </summary>
    
      <category term="年终总结" scheme="http://loganwz.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="http://loganwz.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>将bolg同时部署到github和coding</title>
    <link href="http://loganwz.com/2018/11/30/logan10blog2/"/>
    <id>http://loganwz.com/2018/11/30/logan10blog2/</id>
    <published>2018-11-30T01:21:00.000Z</published>
    <updated>2019-08-16T13:22:23.157Z</updated>
    
    <content type="html"><![CDATA[<p>第一次通过Hexo搭建博客的时候，托管在了Github，访问速度还算可以，但是最大的问题是网站收录问题。<br>建站当天Google就收录了站点，因为Github禁止了百度蜘蛛爬取，所以百度无法收录。所以要解决收录问题可以同时部署在Github和coding，国内的用户访问coding，国外访问Github。<br><a id="more"></a><br>上篇文章已经写了如何通过Hexo+Github搭建blog，可以参考：<a href="http://loganwz.com/2018/11/29/logan09blog/">通过Hexo+Github搭建个人bolg</a><br>这篇文章主要介绍<code>部署到coding</code>及<code>域名解析</code></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong> 1.新建coding仓库 </strong><br>注册coding账号，使用方式与Github相似，新建一个仓库<br>仓库命名规则与Github稍有不同，仓库名直接与coding账号名称相同即可，同样是为了避免二级域名<br><strong> 2.添加SSH </strong><br>找到你的<code>id_rsa.pub</code>文件，复制公钥内容，找到coding账号<code>个人设置</code>下的<code>SSH公钥</code>,新增公钥粘贴进去即可<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211831.jpg" alt=""><br>继续输入<code>ssh -T git@git.coding.net</code><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211836.jpg" alt=""><br>出现以上信息代表添加成功</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><strong> 1.修改配置文件 </strong><br>复制coding中新建仓库的SSH连接<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211848.jpg" alt=""><br>打开博客文件夹下的<code>_config.yml</code>全局配置文件，修改样式如下，将复制的coding仓库的SSH连接粘贴到对应位置<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211852.jpg" alt=""><br>修改好后保存配置文件<br><strong> 2.同时部署到Github和coding </strong><br>继续输入命令<code>hexo d</code>就同时推送到了两个远程仓库<br>刷新coding仓库就能看到推送上来的内容了<br>选择coding仓库<code>代码</code>选项下的<code>Pages服务</code>，开启Pages即可<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211856.jpg" alt=""></p><blockquote><p><strong>注意：</strong>在博客source/目录下需要创建一个名为<code>Staticfile</code>的空白文件,因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。</p></blockquote><h2 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h2><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211900.png" alt=""><br>分别ping了托管到的两个地方，可以明显看出coding访问要快一些，加上coding能被百度蜘蛛爬取的特点，所以要设置域名解析<br><strong> 1.购买域名 </strong><br>通过阿里云购买即可<br><strong> 2.域名解析 </strong><br>在阿里云账号控制台中添加域名解析，域名解析设置可以参考下图：<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211904.jpg" alt=""><br>解析后等待一会就可以访问。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次通过Hexo搭建博客的时候，托管在了Github，访问速度还算可以，但是最大的问题是网站收录问题。&lt;br&gt;建站当天Google就收录了站点，因为Github禁止了百度蜘蛛爬取，所以百度无法收录。所以要解决收录问题可以同时部署在Github和coding，国内的用户访问coding，国外访问Github。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://loganwz.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://loganwz.com/tags/Hexo/"/>
    
      <category term="blog" scheme="http://loganwz.com/tags/blog/"/>
    
      <category term="Github" scheme="http://loganwz.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>通过Hexo+Github搭建个人bolg</title>
    <link href="http://loganwz.com/2018/11/29/logan09blog/"/>
    <id>http://loganwz.com/2018/11/29/logan09blog/</id>
    <published>2018-11-29T09:28:00.000Z</published>
    <updated>2019-08-16T13:16:58.523Z</updated>
    
    <content type="html"><![CDATA[<p>今天是距离博客初次搭建已经123天<br>下午捣鼓着差点把博客弄崩<br><code>hexo d</code>之后无法自动生成文章归档信息<a id="more"></a><br>搞了半天原来之前误删了之前的一些插件<br>其实可以通过<code>npm ls --depth 0</code>查看缺少那些插件<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211454.jpg" alt=""><br>总结了一下当时通过Hexo搭建静态博客的步骤<br>防止以后再次采坑！</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>无论使用那个平台托管，都是需要Git 来进行代码管理<br>使用配置参考之前的文章：<a href="http://loganwz.com/2018/08/03/logan02Git/" title="Git(一)：关于Git的配置使用及常见问题">Git(一)：关于Git的配置使用及常见问题</a></p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>Node.js 的是一个JavaScript 运行环境,这里我们主要使用它来生成我们博客的静态页面。从官网下载最新的安装包进行默认安装就好。</p><h3 id="其他准备工作"><a href="#其他准备工作" class="headerlink" title="其他准备工作"></a>其他准备工作</h3><p>准备到现在，基本可以开搞，不过博客搭建起来肯定是要发表文章，那么还需要一个markdown编辑器（推荐<code>MarkdownPad2</code>,自带图床比较方便）</p><h3 id="新建github项目"><a href="#新建github项目" class="headerlink" title="新建github项目"></a>新建github项目</h3><p>一般通过Hexo 搭建的博客可以托管在Github 上，Github 为每位用户提供了Github Page 服务。<br>首先要在你的Github 上新建仓库<br>命名规则应该按照<code>username.github.io</code>，其中<code>username</code>指的Github 账号名</p><blockquote><p>尽量按照命名规则进行命名，如果用其他的来命名会产生二级域名</p></blockquote><h2 id="搭建开始"><a href="#搭建开始" class="headerlink" title="搭建开始"></a>搭建开始</h2><p><strong> 1.安装hexo </strong><br>鼠标右键运行<code>Git Bash Here</code><br>然后输入<code>npm install hexo</code><br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211500.png" alt=""><br>出现如图结果就代表安装成功<br><strong> 2.执行hexo命令 </strong><br>新建一个空白文件夹，cd切换到该文件夹，依次执行以下命令<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init   <span class="comment">//初始化hexo环境，会生成一些hexo的文件</span></span><br><span class="line">npm install <span class="comment">//安装所需要的npm依赖</span></span><br><span class="line">hexo <span class="keyword">generate</span> <span class="comment">//生成静态页面</span></span><br><span class="line">hexo server   <span class="comment">//生成本地预览</span></span><br></pre></td></tr></table></figure></p><p>执行完最后一步，访问<a href="http://localhost:4000如果出现页面说明已经搭建成功" target="_blank" rel="noopener">http://localhost:4000如果出现页面说明已经搭建成功</a></p><h2 id="部署到远程仓库"><a href="#部署到远程仓库" class="headerlink" title="部署到远程仓库"></a>部署到远程仓库</h2><p>在上一步中，搭建的博客已经能在本地访问，下一步就是部署到远程仓库，让大家都能访问到<br><strong>1.配置_config.yml</strong><br>找到新建文件夹下面的<code>_config.yml</code>，这是博客的全局配置文件<br>找到<code>deploy</code>,改成如下格式<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  repo：git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p><code>username</code>换成自己的用户名（如果按照上面命名规范来的话）<br>最后在执行<code>hexo deploy</code><br>现在就可以在浏览器中访问http：//username.github.io了</p><h2 id="其他一些小知识"><a href="#其他一些小知识" class="headerlink" title="其他一些小知识"></a>其他一些小知识</h2><p><code>hexo clean</code>可以用来清除缓存，运行之后就可以清除上次生成的静态页面文件<br>以下命令都可以缩写<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generator  --&gt; hexo g</span><br><span class="line">hexo<span class="built_in"> server </span> --&gt; hexo s</span><br><span class="line">hexo deploy --&gt; hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是距离博客初次搭建已经123天&lt;br&gt;下午捣鼓着差点把博客弄崩&lt;br&gt;&lt;code&gt;hexo d&lt;/code&gt;之后无法自动生成文章归档信息
    
    </summary>
    
      <category term="Hexo" scheme="http://loganwz.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://loganwz.com/tags/Hexo/"/>
    
      <category term="blog" scheme="http://loganwz.com/tags/blog/"/>
    
      <category term="Github" scheme="http://loganwz.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>遍历Map的几种方法</title>
    <link href="http://loganwz.com/2018/11/14/logan08map/"/>
    <id>http://loganwz.com/2018/11/14/logan08map/</id>
    <published>2018-11-14T00:54:00.000Z</published>
    <updated>2018-12-31T09:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久更新博客，前段时间校招真是心疲力竭（主要还是太菜…）<br>面试中被问到Map的遍历方法,基本上没答出来<br>根据网上的文章整理了Java中Map的几种遍历方法<br><a id="more"></a></p><h3 id="通过for-each循环使用entry遍历key和value"><a href="#通过for-each循环使用entry遍历key和value" class="headerlink" title="通过for-each循环使用entry遍历key和value"></a>通过for-each循环使用entry遍历key和value</h3><p><strong>大多数情况下使用最常见，在键值都需要时使用</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;<span class="keyword">String</span>, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"b"</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"c"</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">for</span>(Map.Entry&lt;<span class="keyword">String</span>,Integer&gt; entry : <span class="built_in">map</span>.entrySet()) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"key = "</span> + entry.<span class="built_in">getKey</span>() + <span class="string">", value="</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for-each循环在Java5中被引用，所以只能适用于5及以上版本；<br>遍历前应该检查map是否为空，遍历空集合的话会抛出NullPointerExcption</p><h3 id="在for-each循环中分别遍历keys或values"><a href="#在for-each循环中分别遍历keys或values" class="headerlink" title="在for-each循环中分别遍历keys或values"></a>在for-each循环中分别遍历keys或values</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"key = "</span> + <span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Integer value : <span class="built_in">map</span>.values()) &#123;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"value = "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Iterator遍历"><a href="#使用Iterator遍历" class="headerlink" title="使用Iterator遍历"></a>使用Iterator遍历</h3><p>使用泛型：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Iterator&lt;Map.Entry&lt;String, </span>Integer&gt;&gt; entries = <span class="meta">map</span>.entrySet().<span class="keyword">iterator() </span><span class="comment">;</span></span><br><span class="line"><span class="symbol">while</span> (entries.hasNext()) &#123;</span><br><span class="line"><span class="meta">Map</span>.Entry&lt;<span class="keyword">String, </span>Integer&gt; <span class="meta">entry</span> = entries.next()<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"key = "</span> + <span class="meta">entry</span>.getKey() + <span class="string">", value = "</span> + <span class="meta">entry</span>.getValue())<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用泛型：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Iterator </span>entries = <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></span><br><span class="line"><span class="keyword">while </span>(entries.hasNext()) &#123;</span><br><span class="line"><span class="meta">Map</span>.Entry <span class="meta">entry</span> = (<span class="meta">Entry</span>) entries.next()<span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span>key = (<span class="keyword">String)entry.getKey();</span></span><br><span class="line"><span class="keyword"></span>Integer value = (Integer) <span class="meta">entry</span>.getValue()<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"key = "</span> + key + <span class="string">", value = "</span> + value)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方法是在Java老版本中唯一的遍历map的方法。在遍历的同时可以通过<code>iterator.remove()</code>来删除entry。</p><h3 id="通过键找值遍历"><a href="#通过键找值遍历" class="headerlink" title="通过键找值遍历"></a>通过键找值遍历</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet()) &#123;</span><br><span class="line">Integer value = <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"key = "</span> + <span class="built_in">key</span> + <span class="string">", value = "</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：效率低</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久更新博客，前段时间校招真是心疲力竭（主要还是太菜…）&lt;br&gt;面试中被问到Map的遍历方法,基本上没答出来&lt;br&gt;根据网上的文章整理了Java中Map的几种遍历方法&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://loganwz.com/2018/09/17/logan07Singleton/"/>
    <id>http://loganwz.com/2018/09/17/logan07Singleton/</id>
    <published>2018-09-17T13:58:00.000Z</published>
    <updated>2018-11-19T03:52:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式（Singleton）是一种常见的设计模式，是指类的一个对象在系统中只有一个实例。<br><a id="more"></a></p><h2 id="单例模式有很多应用场景"><a href="#单例模式有很多应用场景" class="headerlink" title="单例模式有很多应用场景"></a>单例模式有很多应用场景</h2><ul><li>Windows系统中的<code>任务管理器</code>和<code>回收站</code>就是典型的单例模式，无论在什么位置打开，系统中始终只有一个任务管理器和回收站。</li><li>网站中的<code>计数器</code>一般也是采用单例模式，否则难以同步。</li><li>应用程序的<code>日志应用</code>，一般都使用单例模式实现，从而方便内容追加。</li></ul><h2 id="单例模式的三要素"><a href="#单例模式的三要素" class="headerlink" title="单例模式的三要素"></a>单例模式的三要素</h2><blockquote><ul><li>私有的构造方法；</li><li>指向自己实例的私有静态引用；</li><li>以自己实例为返回值的静态的公有方法。</li></ul></blockquote><h2 id="单例模式的作用"><a href="#单例模式的作用" class="headerlink" title="单例模式的作用"></a>单例模式的作用</h2><blockquote><p>保证一个类只有一个实例，并且提供一个访问该实例的全局站点。</p></blockquote><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><p>如果想要保证只有一个实例，就要保证外界不能随便new这一个对象，因此要将<code>构造方法私有化</code>。</p><blockquote><p>私有化构造方法即将new这个对象的权限收回，只能在这个类的内部去实例化这个对象。</p></blockquote><h2 id="单例模式的两种常见形式"><a href="#单例模式的两种常见形式" class="headerlink" title="单例模式的两种常见形式"></a>单例模式的两种常见形式</h2><h3 id="“懒汉式”"><a href="#“懒汉式”" class="headerlink" title="“懒汉式”"></a>“懒汉式”</h3><blockquote><p><code>&quot;懒汉式&quot;</code>顾名思义就是很懒的意思，只有在需要某个类的实例的时候才会执行，new出唯一的一个对象。</p></blockquote><h4 id="“懒汉式”示例"><a href="#“懒汉式”示例" class="headerlink" title="“懒汉式”示例"></a>“懒汉式”示例</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton1 &#123;</span><br><span class="line">   //定义一个变量来存储创建好的类实例</span><br><span class="line">   //因为这个变量要在静态方法中使用，所以需要加上static修饰</span><br><span class="line">  <span class="keyword"> private</span><span class="keyword"> static</span> Singleton1<span class="built_in"> instance </span>= null;</span><br><span class="line">   </span><br><span class="line">   //私有化构造方法，好在内部控制创建实例的数目</span><br><span class="line">  <span class="keyword"> private</span> Singleton1() &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   //定义一个方法来为客户端提供类实例</span><br><span class="line">   //这个方法需要定义成类方法，也就是要加static</span><br><span class="line">  <span class="keyword"> public</span> synchronized<span class="keyword"> static</span> Singleton1 getInstance() &#123;</span><br><span class="line">      //判断这个实例是不是有值</span><br><span class="line">     <span class="built_in"> if </span>(instance == null) &#123;</span><br><span class="line">         //如果没有，就创建一个类实例，并把值赋给存储类实例的变量</span><br><span class="line">        <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton1();</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="built_in"> return </span>instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“懒汉式”单例模式特点"><a href="#“懒汉式”单例模式特点" class="headerlink" title="“懒汉式”单例模式特点"></a>“懒汉式”单例模式特点</h4><blockquote><p><code>以时间换空间：</code> 延迟加载，在需要的时候才实例化对象，节省了部分空间，避免了因为没有使用而造成的浪费。<br><code>线程安全性：</code>不安全，可能会存在同时调用构造方法，当第一次调用时运行入构造方法，判断实例为null，在即将要实例的时候，cpu切换到第二次调用，又进入构造方法同时判断为null并成功实例化，这时候再返回第一次调用同样也进行了实例化，但这样会return两个不同的实例对象，造成线程安全问题（类似于银行取钱）。解决方法：<code>加锁synchronized</code></p></blockquote><h3 id="“饿汉式”"><a href="#“饿汉式”" class="headerlink" title="“饿汉式”"></a>“饿汉式”</h3><blockquote><p><code>&quot;饿汉式&quot;</code>顾名思义是饥渴难耐，在类被加载的时候立即实例化一个对象。</p></blockquote><h4 id="“饿汉式”示例"><a href="#“饿汉式”示例" class="headerlink" title="“饿汉式”示例"></a>“饿汉式”示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">   <span class="comment">//定义一个变量来存储创建好的类实例</span></span><br><span class="line">   <span class="comment">//直接在这里创建类实例，由虚拟机来保证只会创建一次</span></span><br><span class="line">   <span class="comment">//这个类加载到内存的时候就会创建唯一的一份实例</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//私有化构造方法，好在内部控制创建实例的数目</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//定义一个方法来为客户端提供类实例</span></span><br><span class="line">   <span class="comment">//这个方法需要定义成类方法，也就是要加static</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//直接使用已经创建好的实例</span></span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="“饿汉式”单例模式特点"><a href="#“饿汉式”单例模式特点" class="headerlink" title="“饿汉式”单例模式特点"></a>“饿汉式”单例模式特点</h4><blockquote><p><code>以空间换时间：</code> 立即加载，在加载类的时候就会立即实例化一个对象。时间上没有延迟，但可能会造成实例化的对象没被使用从而对导致空间资源浪费。<br><code>线程安全性：</code> 安全的</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式（Singleton）是一种常见的设计模式，是指类的一个对象在系统中只有一个实例。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://loganwz.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基础知识(一):Java部分</title>
    <link href="http://loganwz.com/2018/09/17/logan06java/"/>
    <id>http://loganwz.com/2018/09/17/logan06java/</id>
    <published>2018-09-17T12:09:00.000Z</published>
    <updated>2019-08-16T13:14:10.769Z</updated>
    
    <content type="html"><![CDATA[<p> 本文包括Java基础的一些问题，由网上的资料整理所得。内容多，不定时整理更新。<br><a id="more"></a></p><h1 id="Java基础部分"><a href="#Java基础部分" class="headerlink" title="Java基础部分"></a>Java基础部分</h1><h2 id="Java跨平台原理"><a href="#Java跨平台原理" class="headerlink" title="Java跨平台原理"></a>Java跨平台原理</h2><p>因为<code>JVM（java虚拟机）</code>能够跨平台安装，不同系统、不同版本、不同位数的JVM帮助开发者屏蔽了操作系统的不同，使得相应的字节码可以在任何平台上运行。</p><h2 id="Java中的基本数据类型"><a href="#Java中的基本数据类型" class="headerlink" title="Java中的基本数据类型"></a>Java中的基本数据类型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">位数</th><th style="text-align:center">范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">byte(字节)</td><td style="text-align:center">8</td><td style="text-align:center">-128~127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short(短整型)</td><td style="text-align:center">16</td><td style="text-align:center">-32768~32768</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">int(整型)</td><td style="text-align:center">32</td><td style="text-align:center">-21亿~21亿</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long(长整型)</td><td style="text-align:center">64</td><td style="text-align:center">-2^63~2^63-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">float(浮点型)</td><td style="text-align:center">32</td><td style="text-align:center"></td><td style="text-align:center">0.0f</td></tr><tr><td style="text-align:center">double(双精度)</td><td style="text-align:center">64</td><td style="text-align:center"></td><td style="text-align:center">0.0d</td></tr><tr><td style="text-align:center">char(字符型)</td><td style="text-align:center">16</td><td style="text-align:center">\u0000~\uffff</td><td style="text-align:center">\u0000</td></tr><tr><td style="text-align:center">boolean(布尔型)</td><td style="text-align:center">1</td><td style="text-align:center">true/false</td><td style="text-align:center">false</td></tr></tbody></table><blockquote><p><code>byte-&gt;short(char)-&gt;int-&gt;long-&gt;float-&gt;double</code><br>从小到大自动类型转换<br>从大到小需要强制类型转换，可以会丢失精度</p></blockquote><h2 id="包装数据类型"><a href="#包装数据类型" class="headerlink" title="包装数据类型"></a>包装数据类型</h2><table><thead><tr><th style="text-align:center">基本数据类型</th><th style="text-align:center">包装数据类型</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr></tbody></table><p>基本数据类型和包装数据类型之间可以通过<code>装箱（把基本的数据类型转换成对应的包装类型）</code>和<code>拆箱（把包装类型转换为基本数据类型）</code>相互转换。<br>Java是面向对象的语言，基本数据类型不具备面向对象的特性。</p><h2 id="String和StringBuffer、StringBuilder的区别"><a href="#String和StringBuffer、StringBuilder的区别" class="headerlink" title="String和StringBuffer、StringBuilder的区别"></a>String和StringBuffer、StringBuilder的区别</h2><p><code>String</code>是内容不可变的字符串</p><blockquote><p>String底层使用了一个不可变的字符串数组<code>final char[]</code>,因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响。</p></blockquote><p><code>StringBuilder(线程不安全) StringBuffer(线程安全)</code>是内容可以改变的字符串</p><blockquote><p>StringBuilder StringBuffer底层使用的是可变的字符数组（没有用final修饰），每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。一般情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。</p></blockquote><p><strong>三者的区别：</strong><br>拼接字符串时：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String进行拼接：</span></span><br><span class="line"><span class="keyword">String</span> c = <span class="string">"a"</span> + <span class="string">"b"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringBuffer或StringBuilder拼接时：</span></span><br><span class="line">StringBuilder c = <span class="built_in">new</span> StringBuilder();</span><br><span class="line">c.<span class="built_in">append</span>(<span class="string">"a"</span>).<span class="built_in">append</span>(<span class="string">"b"</span>);</span><br></pre></td></tr></table></figure><p><strong>三者效率：</strong><br><code>StringBuilder&gt;StringBuffer&gt;String</code></p><blockquote><p> <code>Java.lang.StringBuffer</code>线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。虽然在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。<br> 可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。<br> StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；而 insert 方法则在指定的点添加字符。<br> 例如，如果 z 引用一个当前内容是“start”的字符串缓冲区对象，则此方法调用 z.append(“le”) 会使字符串缓冲区包含“startle”，而 z.insert(4, “le”) 将更改字符串缓冲区，使之包含“starlet”。<br> <code>java.lang.StringBuilder</code>一个可变的字符序列是5.0新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同。</p></blockquote><h2 id="Java中的集合"><a href="#Java中的集合" class="headerlink" title="Java中的集合"></a>Java中的集合</h2><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211240.png" alt=""><br>Java中的集合分为：Conllection和Map（即value，key-value）两种</p><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><blockquote><p>Collection接口是集合类的跟接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是<code>Set</code>和<code>List</code>。</p></blockquote><p><strong>List是有序的，可以重复。</strong><br>  List中常用的ArrayList和LinkedList的区别和使用场景：</p><ul><li>ArrayList底层使用的是<code>数组</code>，数据查询特定元素比较快，而插入、删除和修改比较慢（数组在内存中是一块连续的内存，插入、删除需要移动内存）</li><li>LinkedList使用的是<code>链表</code>，查询效率低（查询需要从头开始，一个一个地找），而插入、删除的效率高（插入是不需要移动内存，只需要改变引用只想即可）</li></ul><p><strong>Set是无序的，不可以重复。</strong><br>根据equals和hashcode判断，也就是如果一个对象要存储在Set中，必须要重写equals和hashcode方法。</p><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><h2 id="HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别？"><a href="#HashMap哈HashTable的区别-HashTable和ConcurrentHashMap的区别？" class="headerlink" title="HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别？"></a>HashMap哈HashTable的区别?HashTable和ConcurrentHashMap的区别？</h2><p>相同点：HashMap和HashTable都可以用来存储Key-value的数据<br>不同点：<br>1.HashMap可以把null作为Key或者value的，而HashTable不可以<br>2.HashMap是线程不安全的，效率较高；而HashTable是线程安全的，效率较低。<br><strong>如果既要线程安全又要效率高？</strong><br>可以通过把整个Map分为N个Segment（类似于HashTable），操作前面的而不影响后面的使用，可以提供相同的线程安全，但是效率提升N倍，默认提升16倍。</p><h2 id="线程的几种实现方式-启动方式？区分方式？"><a href="#线程的几种实现方式-启动方式？区分方式？" class="headerlink" title="线程的几种实现方式?启动方式？区分方式？"></a>线程的几种实现方式?启动方式？区分方式？</h2><p><strong>线程的实现方式</strong><br>1.通过继承Thread类实现一个线程<br>2.通过实现Runnable接口实现一个线程<br>两者区别：Java是单继承的，继承Thread类方式将单继承位置占了。这个时候只能去实现接口，不能再去继承别的类。而实现Runnable接口的方式不影响类的继承。<br><strong>线程的启动方式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承Tread方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//继承了Thread的对象</span></span><br><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="comment">//不是启动线程，只是调用对象里面的普通的run（）方法</span></span><br><span class="line">myThread.run();</span><br><span class="line"><span class="comment">//真正启动一个线程调用start（）方法，执行的就是run方法里面的内容</span></span><br><span class="line">myThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Runnable接口方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//实现Runnable接口的对象</span></span><br><span class="line">MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread（myRunnable，<span class="string">"线程名字"</span>）；</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>线程的区分方式</strong></p><blockquote><p><code>thread.setName(&quot;设置线程的名称&quot;)</code>这是一种规范，在创建线程之后，都需要设置名称。</p></blockquote><h2 id="有没有使用过线程并发库"><a href="#有没有使用过线程并发库" class="headerlink" title="有没有使用过线程并发库?"></a>有没有使用过线程并发库?</h2><blockquote><p>JDK5中增加了Doug Lea的并发库，这一引进给Java线程的管理和使用提供了强大的便利性。 java.util.current包中提供了对线程优化、管理的各项操作，使得线程的使用变得的心应手。该包提供了线程的运行，线程池的创建，线程生命周期的控制.<br>Java通过Executors提供四个静态方法创建四种线程池，分别为：<br>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。<br>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。<br>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</p></blockquote><h2 id="线程池的作用"><a href="#线程池的作用" class="headerlink" title="线程池的作用"></a>线程池的作用</h2><p>1.限定线程的个数，不会导致由于线程过多而导致系统运行缓慢或崩溃<br>2.线程池不需要每次都去创建或销毁，节省了资源<br>3.线程池不需要每次都去创建，响应时间更快</p><h2 id="常用的设计模式有哪些？"><a href="#常用的设计模式有哪些？" class="headerlink" title="常用的设计模式有哪些？"></a>常用的设计模式有哪些？</h2><blockquote><p>设计模式是经过前人无数次的实践总结出来的，在设计过程中可以反复使用的、可以解决特定问题的设计方法。</p></blockquote><p><strong>单例模式</strong><br>参考文章：<a href="http://loganwz.com/2018/09/17/logan07Singleton/" title="单例模式（“饱汉式”和“饿汉式”）">单例模式（“饱汉式”和“饿汉式”）</a><br><strong>工厂模式</strong><br>Spring IOC就是使用了工厂模式，对象的创建交给一个工厂去做。<br><strong>代理模式</strong><br>Spring AOP就是使用的动态代理。</p><h1 id="Java-Web部分"><a href="#Java-Web部分" class="headerlink" title="Java Web部分"></a>Java Web部分</h1><h2 id="http中get和post请求的区别？"><a href="#http中get和post请求的区别？" class="headerlink" title="http中get和post请求的区别？"></a>http中get和post请求的区别？</h2><blockquote><p>GET和POST请求都是http的请求方式，用户通过不同的http的请求方式完成对资源（url）的不同操作。GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个操作,具体点来讲GET一般用于获取/查询资源信息，而POST一般用于更新资源信息</p></blockquote><p><strong>GET</strong><br>1.采用URL请求路径传输参数。参数拼接 在URL后面。<br>2、参数传输过程中隐私性较差，直接在URL后面。<br>3、路径可以容纳的数据有限，只能传递少量参数。<br>4、所有请求默认就是get。<br><strong>POST</strong><br>1、采用实体内容传参数。<br>2、参数在传输过程中不可见，隐私性好。<br>3、实体内容专门用来传输数据，大小没有限制。<br>4、使用：在form上加method=”post”</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="什么是Servlet？"><a href="#什么是Servlet？" class="headerlink" title="什么是Servlet？"></a>什么是Servlet？</h3><p>Servlet是用Java编写的服务端程序，主要功能在于交互式地浏览和修改数据，生成<code>动态web内容</code>。Servlet运行于支持Java的应用服务器中。是sun公司提供的一套规范(接口),用来处理客户端的请求、响应动态资源给浏览器的。<br>Servlet实质就是java代码，通过java的API动态的向客户端输出内容。</p><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>Servlet的生命周期包括<code>加载</code>和<code>实例化、初始化、处理请求</code>以及<code>服务结束</code></p><blockquote><p><code>init()</code>：<br>在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。<br><code>service()</code>：<br>它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。<br><code>destroy（）</code>：<br>仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p></blockquote><p><strong>Servlet工作的步骤：</strong><br>1.Web Client 向Servlet容器（Tomcat）发出Http请求<br>2.Servlet容器接收Web Client的请求<br>3.Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。<br>4.Servlet容器创建一个HttpResponse对象<br>5.Servlet容器调用HttpServlet对象的service方法，把6.HttpRequest对象与HttpResponse对象作为参数传给HttpServlet 对象。<br>7.HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。<br>8.HttpServlet调用HttpResponse对象的有关方法，生成响应数据。<br>9.Servlet容器把HttpServlet的响应结果传给Web Client。</p><h3 id="Servlet中转发和重定向的区别"><a href="#Servlet中转发和重定向的区别" class="headerlink" title="Servlet中转发和重定向的区别"></a>Servlet中转发和重定向的区别</h3><p>1.转发是服务器端的转向，重定向是客户端的跳转<br>2.转发浏览器的地址不会发生改变，重定向浏览器地址会发生改变<br>3.转发是在一次请求中完成，重定向是重新发起请求<br>4.转发是在服务器端完成，而不用客户端重新发起请求，效率较高</p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><p>JSP就是一个servlet程序，servlet的技术可以用在jsp程序中，但是jsp的技术并不是全部适用servlet程序。<br>jsp继承servlet。</p><h3 id="JSP的内置对象及作用"><a href="#JSP的内置对象及作用" class="headerlink" title="JSP的内置对象及作用"></a>JSP的内置对象及作用</h3><p><strong>Jsp中的四个域对象</strong></p><table><thead><tr><th style="text-align:center">域对象</th><th style="text-align:center">作用范围</th></tr></thead><tbody><tr><td style="text-align:center">pageContext</td><td style="text-align:center">page域</td></tr><tr><td style="text-align:center">request</td><td style="text-align:center">request域</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center">sesion域</td></tr><tr><td style="text-align:center">application</td><td style="text-align:center">context域</td></tr></tbody></table><p>1、域对象的作用：<br>保存数据和获取数据，用于数据的共享。<br>2、域对象方法：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">setAttribute</span>(<span class="string">"name"</span>, Object);<span class="comment">//保存数据</span></span><br><span class="line"><span class="selector-tag">getAttribute</span>(<span class="string">"name"</span>);<span class="comment">//获取数据</span></span><br><span class="line"><span class="selector-tag">removeAttribute</span>(<span class="string">"name"</span>);<span class="comment">//清除数据</span></span><br></pre></td></tr></table></figure></p><p>3、域对象的作用范围:<br>page域：只能在当前jsp页面使用（当前页面）<br>request域：只能在一次请求中使用（转发）<br>session域：只能在同一个会话中使用（会话，私有的）<br>context域（application域）：只能在同一个web应用中使用（全局的）</p><h2 id="Session和Cookie的区别"><a href="#Session和Cookie的区别" class="headerlink" title="Session和Cookie的区别"></a>Session和Cookie的区别</h2><blockquote><p>Session和cookie都是会话(Seesion)跟踪技术。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。但是Session的实现依赖于Cookie,sessionId(session的唯一标识需要存放在客户端).</p></blockquote><p><strong>cookie 和session 的区别：</strong><br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用COOKIE。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。<br>5、所以尽量：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中，比如购物车<br>购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 本文包括Java基础的一些问题，由网上的资料整理所得。内容多，不定时整理更新。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://loganwz.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://loganwz.com/tags/Java/"/>
    
      <category term="编程语言" scheme="http://loganwz.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Git(二):版本回退及分支</title>
    <link href="http://loganwz.com/2018/08/26/logan05Git(2)/"/>
    <id>http://loganwz.com/2018/08/26/logan05Git(2)/</id>
    <published>2018-08-26T03:25:00.000Z</published>
    <updated>2019-08-16T13:13:44.705Z</updated>
    
    <content type="html"><![CDATA[<p>关于Git版本控制更加深入一点的知识，详细初始使用请查看上一篇：<a href="http://loganwz.com/2018/08/03/logan02Git/" title="关于Git的配置使用及常见问题">关于Git的配置使用及常见问题</a><br>本文主要包括版本回退及分支相关内容。<br><a id="more"></a></p><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><ul><li><code>git reset --hard HEAD^</code>回退到上一版本</li><li><code>git reset --hard HEAD^</code>回退到上上版本</li><li><code>git reset --hard HEAD~100</code>回退到上100个版本</li><li><code>git reset --hard 具体版本号</code>回退到具体版本号<br>记录每一次命令：<code>git reflog</code><br><code>git checkout -- readme.txt</code>：<br>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：<br>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一<code>次git commit</code>或<code>git add</code>时的状态。</li></ul><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除文件后，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm filename</code> 删掉，并且<code>git commit</code><br>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本： <code>git checkout -- filename</code></p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul><li><code>git branch 分支名</code>：创建分支</li><li><code>git checkout 分支名</code>：切换分支</li><li><code>git checkout -b 分支名</code> ：创建与切换同时进行</li><li><code>git branch</code>：列出所有分支</li><li><code>git merge dev</code>：把dev分支的工作成果合并到master分支上</li><li><code>git branch -d 分支名</code> : 删除分支</li></ul><h1 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h1><p>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；<br>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。<br>所以，团队合作的分支看起来就像这样：<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211229.png" alt=""></p><h1 id="多人协助"><a href="#多人协助" class="headerlink" title="多人协助"></a>多人协助</h1><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816211234.jpg" alt=""></p><p>本文作者：<code>rottengeek</code><br>原文链接：<a href="https://segmentfault.com/a/1190000016012022" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016012022</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Git版本控制更加深入一点的知识，详细初始使用请查看上一篇：&lt;a href=&quot;http://loganwz.com/2018/08/03/logan02Git/&quot; title=&quot;关于Git的配置使用及常见问题&quot;&gt;关于Git的配置使用及常见问题&lt;/a&gt;&lt;br&gt;本文主要包括版本回退及分支相关内容。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://loganwz.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://loganwz.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://loganwz.com/2018/08/13/logan03markdown/"/>
    <id>http://loganwz.com/2018/08/13/logan03markdown/</id>
    <published>2018-08-13T11:35:00.000Z</published>
    <updated>2019-08-16T13:10:06.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown介绍"><a href="#markdown介绍" class="headerlink" title="markdown介绍"></a>markdown介绍</h1><p>作为一种轻量级的<strong>标记语言</strong>，专门用来编写文档，markdown的语法十分简单。通过markdown编辑器可以实时查看文档的效果，可以非常方便的进行写作和日后查阅。<br><a id="more"></a></p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816210804.png" alt=""><br>（图片指令对应效果如上）</p><h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>粗体的语法是：用在需要使用粗体显示的文本前后各加两个<em>或者_。<br>斜体 标记语法是：在需要使用斜体显示的文本前后各加一个</em>或者_</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在一个空白行中连续输入三个以上的 *(星号)、-（减号）或者_(底线）来实现，该行不允许有其他文字。</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>要加删除线的文字左右分别添加~~</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在要引用的文字前加&gt;，&gt;必须位于一行的行首<br>可以多层引用，只需要将&gt;递增</p><blockquote><p>这是引用</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>使用格式：<br>     <a href="超链接地址" title="超链接title">超链接名</a><br>     title可加可不加<br>实例：<br><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816210811.jpg" alt=""></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表用 - + * 任何一种都可以<br>只需要加在列表项之前<br>示例：<br><img src="https://i.imgur.com/MXjDvrF.png" alt=""><br>显示效果：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表为数字加列表内容<br><img src="https://i.imgur.com/UHeXxdW.png" alt=""><br>效果：<br>1.列表内容<br>2.列表内容<br>3.列表内容</p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>1.一级列表内容<br>   1.二级列表内容<br>   2.二级列表内容<br>有序无序都可以适用</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><img src="https://i.imgur.com/uCxqoxQ.png" alt=""><br>第二行分割表头和内容。</p><ul><li>有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>效果：</li></ul><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">表头</th><th style="text-align:center">表头</th></tr></thead><tbody><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr><tr><td style="text-align:center">内容</td><td style="text-align:center">内容</td><td style="text-align:center">内容</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><img src="http://pvjbpccn5.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190816210819.jpg" alt=""><br><strong>效果如下：</strong><br>单行代码：<br><code>代码内容</code><br>多行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">代码</span><br><span class="line">代码</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown介绍&quot;&gt;&lt;a href=&quot;#markdown介绍&quot; class=&quot;headerlink&quot; title=&quot;markdown介绍&quot;&gt;&lt;/a&gt;markdown介绍&lt;/h1&gt;&lt;p&gt;作为一种轻量级的&lt;strong&gt;标记语言&lt;/strong&gt;，专门用来编写文档，markdown的语法十分简单。通过markdown编辑器可以实时查看文档的效果，可以非常方便的进行写作和日后查阅。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://loganwz.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="http://loganwz.com/tags/markdown/"/>
    
  </entry>
  
</feed>
